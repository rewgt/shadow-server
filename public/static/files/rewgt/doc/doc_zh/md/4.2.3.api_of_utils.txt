4.2.3 API 函数
------------

&nbsp;

> 通用服务
> - [`version`](#4.2.3.!version)
> - [`identicalId`](#4.2.3.!identical_id)
> - [`gotoHash`](#4.2.3.!goto_hash)
> - [`marked`](#4.2.3.!marked)
> - [`ajax`](#4.2.3.!ajax)
> - [`jsonp`](#4.2.3.!jsonp)
> - [`widgetNum`](#4.2.3.!widget_num)
> - [`Base64.encode`](#4.2.3.!base64_encode)
> - [`Base64.decode`](#4.2.3.!base64_decode)

> immutable 数据比较
> - [`shallowEqual`](#4.2.3.!shallow_equal)
> - [`shallowCompare`](#4.2.3.!shallow_compare)
> - [`shouldUpdate`](#4.2.3.!should_update)

> class 分析
> - [`classNameOf`](#4.2.3.!class_name_of)
> - [`hasClass`](#4.2.3.!has_class)
> - [`addClass`](#4.2.3.!add_class)
> - [`removeClass`](#4.2.3.!remove_class)
> - [`setClass`](#4.2.3.!set_class)
> - [`mergeClass`](#4.2.3.!merge_class)

> Element 与 Component 组装
> - [`getWTC`](#4.2.3.!get_wtc)
> - [`getWdgtType`](#4.2.3.!get_wdgt_type)
> - [`keyOfNode`](#4.2.3.!key_of_node)
> - [`keyOfElement`](#4.2.3.!key_of_element)
> - [`eachElement`](#4.2.3.!each_element)
> - [`setElement`](#4.2.3.!set_element)
> - [`eachComponent`](#4.2.3.!each_component)
> - [`setChildren`](#4.2.3.!set_children)
> - [`loadElement`](#4.2.3.!load_element)
> - [`loadElementEx`](#4.2.3.!load_element_ex)
> - [`setVendorLib`](#4.2.3.!set_vendor_lib)
> - [`bindMountData`](#4.2.3.!bind_mount_data)
> - [`fireTrigger`](#4.2.3.!fire_trigger)

&nbsp;

##### <a name="version"></a>`version()`

> 返回当前 Shadow Widget 的版本号，返回值字串如 `"0.0.1"`。

##### <a name="identical_id"></a>`identicalId()`

> 返回唯一值序号，返回值是整数，本函数每次调用的返回值都与历史值不同。

##### <a name="goto_hash"></a>`gotoHash(sHash,callback)`

> 用于跳转到 `sHash` 指示的位置，`sHash` 指示待跳转段路径，`callback` 是跳转后用于回调的函数，格式为 `callback(sRetHash)`，`sRetHash` 的值若为空字串，表示跳转失败，否则其值为成功跳转的段路径。

> 段路径 `sHash` 的取值与跳转含义举例如下：

```
    #/segA/segB             // 依次选择 segA 与 segB 段
    #/segA/!anchor_a        // 选择 segA 后，再跳到名为 anchor_a 的锚点。
    #0                      // 切换到首个场景页
    #scene_a                // 切换到名为 scene_a 场景页
    #scene_a/segA/!anchor_a // 切换到 scene_a 场景后跳至 /segA/!anchor_a
```

##### <a name="marked"></a>`marked(sMarkdown)`

> 用于转换 markdown 文本到 html 标签代码，输入 `sMarkdown` 是符合 markdown 格式规范的文本，返回值是 html 标签代码。

> 说明1：shadow-widget 内置 <a target="_blank" href="https://github.com/chjj/marked">chjj/marked</a> 的 markdown 分析器，本函数就是该分析器的调用入口。

> 说明2：`chjj/marked` 分析器内置支持用 <a target="_blank" href="https://github.com/isagalaev/highlight.js">highlight.js</a> 对源码作高亮处理，此特性在 shadow-widget 同样有效，只需预先在当前网页将 `highlight.js` 导入进来。

``` html
  <link rel="stylesheet" href="/path/to/styles/default.css">
  <script src="/path/to/highlight.pack.js"></script>
```

##### <a name="ajax"></a>`ajax(config)`

> 用于发起 ajax 请求，参数 `config` 的格式为 `{configItem: configValue}`，各配置项含义如下：
> 1.  `type`，取值为 `'GET', 'POST', 'PUT', 'HEAD', 'DELETE'` 五者之一，缺省是 `'GET'`。
> 2. `url`，用来指定发送请求的 URL。
> 3. `dataType`，取值为 `'json', 'pre-json', 'text'` 三者之一，缺省未指定时，如果 URL 读取某 *.json 文件，自动取 `'json'`（即：把请求结果看作规范的 JSON 文本），否则取 `'text'`（即：把结果看作字串）。   
`pre-json` 格式与 `json` 类似，也指示客户侧将返回的数据看作 JSON 格式，`json` 类型直接解析 JSON，但 `pre-json` 类型在解析之前插入两项预处理，其一，把由首尾两个 “`"""`” 括起来的文本看作字串，文本可以跨行书写，其二，允许以 “`//comment`” 的形式在独立行作注释。这两项预处理把所有跨行字串转换为常规 JSON string 值，并删除所有独立行注释。
> 4. `data`，用于请求的附加参数，当 type 为 `POST` 或 `PUT` 时，本参数以 json 格式、utf-8 字串方式上传，其它情况下，本参数附加在发出请求的 URL 上。
> 5. `success`，请求成功时的回调函数，回调格式为 `success(data,statusText,xhr)`，其中 `data` 是ajax 请求的返回数据，对于 `text` 格式它的值是字串，对于 `json` 与 `pre-json`，它的值是经 `JSON.parse()` 转换后的 JSON 数据，`statusText` 是状态描述，`xhr` 是 XmlHttp 对象。
> 6. `error`，请求失败时的回调函数，回调格式为 `error(xhr,statusText)`
> 7. `timeout`，请求的超时等待时间，以毫秒为单位，值为 0 表示永久等待，缺省等待 60 秒。
> 8. `headers`，发送请求要附加的 header 配置，如 `{'Origin':'http://example.com'}`。
> 9. `username` 与 `password`，发送请求要附加的 username 与 password。

##### <a name="jsonp"></a>`jsonp(config)`

> 用于发起 jsonp 请求，参数 `config` 的格式为 `{configItem: configValue}`，各配置项含义如下：

> 1. `url`，用来指定发送请求的 URL。
> 2. `data`，用于请求的附加参数，比如取值 `{name:"wayne",age:"30"}`，会在发送请求的 URL 字串添加 `&name=wayne&age=30`。
> 3. `callback`，请求结束时的回调函数，格式为 `function(jsonData)`，如果请求失败，参数 `jsonData` 为 `null`。
> 4. `notifyError`，取值为 `true` 或 `false`，如果取值 `true`，请求失败将回调 `callback(null)` 来报错，否则不报错，本配置项缺省值为 `false`，即不报错。
> 5. `scriptCharset`，指定 jsonp 的 charset 属性，比如 `"utf-8"`，缺省为不指定。

> 说明：JSONP 请求在客户侧发起 ，需要服务侧支持 JSONP 协议，否则客户侧将得不到正确的响应数据。

##### <a name="widget_num"></a>`widgetNum()`

> 用于查询曾挂入 W 树的 R 节点总数。

##### <a name="base64_encode"></a>`Base64.encode(input)`

> 对输入字串 `input` 进行 Base64 编码，返回编码结果，`input` 要求是 utf-8 格式的字串。

##### <a name="base64_decode"></a>`Base64.decode(input)`

> 对已编码字串 `input` 进行 Base64 解码，返回解码结果，本函数是 `Base64.encode()` 的逆向还原。

##### <a name="shallow_equal"></a>`shallowEqual(obj1,obj2)`

> 本函数用于浅比较，对均为 `object` 类型的 `obj1` 与 `obj2` 做浅层比较，即：依次拿 obj1 下各成员（attr），与 `obj2.attr` 作比较，如果存在差异，就返回 `false`，否则返回 `true`。比较 `obj1.attr` 与 `obj2.attr` 时，如果两者均为 object 类型，只分析这两者下一级成员是否均为恒等，下级的下级将不再分析。

##### <a name="shallow_compare"></a>`shallowCompare(comp,nextProps,nextState)`

> 以浅比较方式，分析 `comp` 节点的 `props` 与 `nextProps` 是否有更改，及 `state` 与 `nextState` 是否有更改，如有更改返回 `true`，否则返回 `false`。

##### <a name="should_update"></a>`shouldUpdate(comp,nextProps,nextState)`

> 本变量记录 Shadow Widget 缺省在用的浅比较函数，各节点 `shouldComponentUpdate()` 中均调用 `utils.shouldUpdate()` 进行是否有更改的比较，系统启动时自动这么赋值：`utils.shouldUpdate = shallowCompare`。

> 如果想改变这种缺省处理方式，只需自定义一个同规格函数，替换 `utils.shouldUpdate` 旧值即可。

##### <a name="class_name_of"></a>`classNameOf(comp)`

> 用于返回 `comp.props.className` 与 `comp.duals.klass` 合并后的 class 定义。

##### <a name="has_class"></a>`hasClass(comp,cls)`

> 用于判断 `cls` 是否在 `comp` 节点的 class 定义（className 与 klass 总和）中存在，参数 `cls` 的格式可以有如下几种：

```
    ['class_a','class_b']
    'class_a'
    'class_a class_b'
```

> 只要 `cls` 中有任一 class 存在，本函数即返回 `true`。

##### <a name="add_class"></a>`addClass(comp,cls)`

> 为 `comp` 添加 `cls` 定义，`cls` 格式与 `utils.hasClass()` 的同名参数相同。如果修改成功，就返回 `true`，未作修改时（可能想添加的 class 早己存在）返回 `false`。

##### <a name="remove_class"></a>`removeClass(comp,cls)`

> 为 `comp` 移除 `cls` 定义，`cls` 格式与 `utils.hasClass()` 的同名参数相同。如果修改成功，就返回 `true`，未作修改时（可能想移除的 class 不存在）返回 `false`。

> 定义在 `comp.props.className` 中的 class 不可移除，若要移除本函数将 throw 一个 Error。 

##### <a name="set_class"></a>`setClass(comp,cls)`

> 为 `comp` 设置 `cls` 定义，参数 `cls` 的格式可以有如下几种：

```
    ['-class_a', '+class_b', 'class_c']
    '-class_a'
    '-class_a +class_b class_c'
```

> 其中各 class 单项用前缀 `'+'` 表示添加，用 `'-'` 前缀表示删除，如果前缀 `'+'` 或 `'-'` 均未使用也表示添加（与前缀 `'+'` 同义）。未在 `cls` 参数指明的原有 class 项将维持不变。

> 如果修改成功，本函数返回 `true`，未作修改返回 `false`。

##### <a name="merge_class"></a>`mergeClass(comp,cls)`

> 为 `comp` 合并 `cls` 定义，`cls` 格式与 `utils.hasClass()` 的同名参数相同。如果修改成功，就返回 `true`，未作修改返回 `false`。

> 注意：`mergeClass` 合并 `cls`，与 `addClass` 添加 `cls` 有差异。前者合并会删除同族其它 class 定义，比如 `default-large-small, large-small-default, small-default-large` 这 3 者同属一族，三者中添加任意一个，剩下两个将从原定义中移除。`S1, S2, S3, S4, S5, S6` 用于控制字号大小，这 6 项也属于同一族。但 `addClass` 只管添加尚不存在 class 定义，不分析是否有同族 class 定义存在。

> 判断两个 class 是否为同族，依据两点，其一，命名若用 `'-'` 连接，依次将首段转移到末段判断两者是否同名，其二，作为系统内置的特例，`S1, S2, S3, S4, S5, S6` 这 6 项视作同族。

##### <a name="get_wtc"></a>`getWTC(cls)`

> 取得指定 `cls` 的 WTC 缺省 React Class 集合。`cls` 允许用如下格式：

```
    '*'
    'Panel'
    'usr.*'
    ['*','Panel','usr.Submit','usr2.*']
```

> 通配符 `'*'` 表示取同级所有 WTC 实例，再用它们逐一定义缺省的 React Class（即：非定制的 React Class）。返回值为 object 类型，比如调用 `t = utils.getWTC(['Panel','Span'])`  后，将有 `t.Panel` 与 `t.Span` 可用。

##### <a name="get_wdgt_type"></a>`getWdgtType(comp)`

> 用于查询指定的 `comp` 节点的类型，返回值为`"panel", "unit", "paragraph", "span"` 这 4 者之一，如果查询失败，返回 `"unknown"`。

##### <a name="key_of_node"></a>`keyOfNode(node)`

> 用于查询指定 DOM 节点 `node` 所对应 component 的 key 值，返回值为 string 类型，如果查询失败，返回空字串。

##### <a name="key_of_element"></a>`keyOfElement(element)`

> 用于从 element 节点查询 key 值。

> 说明：由于 React 版本不同，`element.key` 的格式不尽相同，本函数兼容 react 0.14 以后的版本。

##### <a name="each_element"></a>`eachElement(comp,callback)`

> 用于遍历 `comp` 节点下的各成员 Element，每个子成员都按 `callback(childElement,index)` 方式回调，这里 `childElement` 就是 `comp.$gui.comps[index]` 的值。

> 参数 `callback` 可以缺省，缺省时，调用 `utils.eachElement(comp)` 将返回一个包含所有子成员 Element 的 array 数据。

> 说明：`comp.$gui` 是 Shadow Widget 对 React Component 封装后用于集中存放数据，`comp.$gui.comps` 的功能相当于 `comp.props.children`，因 `$gui` 数据格式未对外开放，请用本函数遍历节点子成员。

##### <a name="set_element"></a>`setElement(comp,index,childElement)`

> 用于设置 `comp` 节点下 `index` 位置的子成员 Element，相当于 `comp.$gui.comps[index] = childElement`，参见 `eachElement(comp,callback)`。

##### <a name="each_component"></a>`eachComponent(comp,callback)`

> 用于遍历 `comp` 节点下的各成员 Component，每个子成员都按 `callback(childComponent,index)` 方式回调，这里 `childComponent` 是 `comp.$gui.comps[index]` 的输出实例。

> 参数 `callback` 可以缺省，缺省时，调用 `utils.eachComponent(comp)` 将返回一个包含所有子成员 Component 的 array 数据。

> 说明：`comp.$gui` 是 Shadow Widget 对 React Component 封装后用于集中存放数据，`comp.$gui.comps` 的功能相当于 `comp.props.children`，因 `$gui` 数据格式未对外开放，请用本函数遍历节点子成员。

##### <a name="set_children"></a>`setChildren(comp,children,callback)`

> 为 `comp` 节点整体安装所有子成员 Element，`children` 是 array 类型，列出所有子成员的 `Element`，`callback` 是安装子成员后的回调函数（不带参数），`callback` 参数可缺省。

> 数组 `children` 的子成员 `Element` 支持如下几种形式：
> 1. 用 json-x 描述的节点，如：`['P',{'html.':'test'}]`
> 2. 用 JSX 描述的节点，如：`<MyClass>{desc}</MyClass>`
> 3. 字符串，系统将自动解析为 `P` 或 `Span` 节点（视 `comp` 是否为 `Panel` 类节点而定）

##### <a name="load_element"></a>`loadElement(jsonX, ...)`

> 读入以 json-x 格式描述的界面，转化成 React Element 返回，既可以用参数只传递一个 json-x 数据，也可以依次传多个，当只传一个 json-x 参数时，返回值是单个 Element，如果传多个 json-x 时，将返回一个数组，数组内依次存放转化结果。

##### <a name="load_element_ex"></a>`loadElementEx(sPrefix,jsonX, ...)`

> 与 `loadElement()` 类似，也读入以 json-x 格式描述的界面，转化成 React Element 返回，但转化时尝试从 main 模块找到相应投影定义并捆绑。`sPrefix` 用作路径前缀，它与 json-x 描述各节点的 key 值串接，形成绝对路径，用于从 main 模块查找投影定义。本函数其它参数格式，以及返回类型与 `loadElement(jsonX, ...)` 的要求相同。

##### <a name="set_vendor_lib"></a>`setVendorLib(sName,callback)`

> 设置厂商 `sName` 提供的库化 UI 根节点，根节点是 TempPanel 模板节点，如果当前 `sName` 的根节点尚不存在，就动态创建一个。回调函数 `callback(template)` 中的 `template` 就是指定厂商 UI 库的根节点。

> 通常在回调函数中，往 `template` 挂载若干 UI 样板节点，引用样板节点要用绝对路径，如：   
&nbsp;&nbsp; `<span $='.rewgt.sample.hoverBtn'>Test button</span>`。

##### <a name="bind_mount_data"></a>`bindMountData(data)`

> 为在 `W.$idSetter` 下已定义的 idSetter 的节点，增加动态数据自动捆绑的功能。当 `W.$idSetter[sKey]` 与 `data[sKey]` 同时定义某 `sKey` 项时，由 `data[sKey]` 指示的数据将在 `componentDidMount` 时自动捆绑到指定节点。

> 参数 `data` 可以缺省，缺省时系统自动取 `W.$dataSrc` 的值。`data` 下允许用 `__attr__` 指定各个 `comp.duals.attr = data[attr]` 赋值的顺序，比如：`utils.bind_mount_data({myButton:{__attr__:['attr1','attr2'],attr1:value1,attr2:value2}})`，如果 `__attr__` 没给出，各项 `duals.attr` 赋值顺序可能不是确定的。

> 在 `W.$idSetter` 中定义的 idSetter 函数，正常情况下不需返回数据，也就是说，idSetter 调用后缺省结果值是 `undefined`，如果让它的返回结果为 `true`，在动态捆绑数据的场合（即使用了 `utils.bindMountData(data)`）有特殊含义，表示忽略数据捆绑。

> 调用本函数时，系统将遍历 `W.$idSetter` 下的 idSetter 函数定义，找出所有可捆绑数据的项目，然后重新定义各项 `W.$idSetter[sKey]`。所以，请注意，本函数通常只调用一次，而且要在任何初始化函数（如 `W.$$onLoad` 与 `W.$onLoad`）运行之前调用。

> 调用函数可以方便的为多个节点自动设置若干 `duals.attr` 初值，所以它常用作测试，不过，非调测目的用它也是可以的。

##### <a name="fire_trigger"></a>`fireTrigger(comp,data)`

> 用来触发在 `comp.duals.trigger` 预定义的一个或多个动作，参数 `data` 可以缺省，如果不缺省，表示先将 `data` 赋给 `comp.duals.trigger`，然后触发动作。

> 参数 `data` 可以是以下几种类型的数据，也可以是这些类型数据组成的 array 数组，一是用 string 类型的路径（相对路径或绝对路径）指定目标选项构件，其预定动作是让目标构件选中。二是用 `{$trigger:sPath}` 指明定义弹窗配置的选项构件，预定动作是弹出弹窗。三是用 `[sPath,modifier,attr]` 更新 `sPath` 所指示节点（不限定为选项构件）的 `duals[attr]` 属性值，这里的 `attr` 可缺省，缺省时自动取 `'data'` 值。

> 由于节点的 `$trigger` 及 `fireType` 属性与 `duals.trigger` 紧密相关，当 `comp` 节点的 `props.fireType` 为 `'onsite'` 时，调用本函数时会先计算 `$trigger`，结果值更新到 `duals.trigger` ，然后触发动作。如果 `props.fireType` 取其它值，`$trigger` 不对本函数调用产生影响。

<pre $=".rewgt.book_top"></pre>

&nbsp;
