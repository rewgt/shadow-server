3.1.2 定制 index.js 入口
----------------

&nbsp;

上一节已给出空白工程入口模块 index.js 的代码，其中如下片断专供开发者定制：

``` js
// write your code here ...

var exportModules = {
  'react': React,
  'react-dom': ReactDOM,
  'shadow-widget': W,
};
```

我们既可以在 `"// write your code here ..."` 的下一行开始直接编写产品代码，也可用 `var my_module = require('./src/my_module')` 方式导入定义在外部的模块。两种方法均有效，我们建议采用后一种，因为模块化结构更清晰。

#### 配置对上层开放的模块

变量 `exportModules` 列出可供上层 require 的模块，比如，我们将上面代码改为：

``` js
// write your code here ...
var my_module = require('./src/my_module');

var exportModules = {
  'react': React,
  'react-dom': ReactDOM,
  'shadow-widget': W,
  'my_module': my_module,
};
```

这样，上层模块（也常通称为 “MAIN 模块”）编写投影类定义时，经 `require('my_module')` 后就可以分享该自定义模块了。

不过，多数情况下我们无需借助 `require` 分享底层模块，因为新定义 WTC 类常登记到 `W.$templates`，新增初始化处理也通常登记到 `main.$$onLoad` 与 `main.$onLoad`，如果没有其它东西要从底层分享到上层的，就不必在 `exportModules` 添加底层模块。Shadow Widget 鼓励底层模块只定义 WTC（并登记到 `W.$templates`）与初始化函数（并登记到 `main.$$onLoad` 与 `main.$onLoad`），这样，底层模块想转成 CDN 版本，用作第 3 方 lib 库时，只需直白的包装成 “MAIN 模块” （[参考前文](#2.7.2.!js_module)）即可。

#### 一个例子

比如我们要在自定义模块 `my_module.js` 中，定义一个移动鼠标在其上可高亮的按钮 `HighlightBtn`，界面这么描述：

``` html
  <span $=HighlightBtn>Click me</span>
```

接着，在 `my_module.js` 模块中定义这个构件模板类（Widget Template Class，WTC）：

``` js
var React = require('react');
var ReactDOM = require('react-dom');
var W = require('shadow-widget');

var T = W.$templates, utils = W.$utils, ex = W.$ex;

class THighlightBtn_ extends T.Button_ {
  constructor(name,desc) {
    super(name || 'HighlightBtn',desc);
  }

  $onMouseOver(event) {
    this.duals.style = {opacity:'0.6'};
  }
  
  $onMouseOut(event) {
    this.duals.style = {opacity:''};
  }
}

T.HighlightBtn_ = THighlightBtn_;
T.HighlightBtn = new THighlightBtn_();
```

上面源码见样例 demo19，使用前请记得先用 `npm install` 安装，并用 `npm start` 启动 babel 翻译。

转义标签描述的构件要从 W.$template 模块（即上面的 `T`）查找，最后一条语句 `T.HighlightBtn = new THighlightBtn_()` 用于注册该 WTC 对象，语句 `T.HighlightBtn_ = THighlightBtn_` 则登记该 WTC，以便设计新的 WTC 时可以继承它。当然，如果某 WTC 没有被继承的价值，就不必登记到 `T` 模块中了。

因为已注册 `T.HighlightBtn`，转义标签可以直接引用它了，如下：
 
``` html
01 <div $=Panel key='top' height='{null}'>
02   <div $=P key='p'>
~~     <span $=HighlightBtn>Click me</span>
04   </div>
05 </div>
```

现在运行 `demo19` 工程，在浏览器中打开 `http://localhost:3000/demo19/`，检验一下界面运行效果。

&nbsp;
