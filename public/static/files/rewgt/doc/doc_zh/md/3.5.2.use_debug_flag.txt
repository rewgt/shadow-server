3.5.2 启用 `__debug__`
--------------------

&nbsp;

#### 启用 `__debug__` 开关

前面各章举例均用到如下在网页中直接编程的样板代码：

``` html
<script>
if (!window.W) { window.W = new Array(); W.$modules = [];}
W.$modules.push( function(require,module,exports) {

var React = require('react');
var ReactDOM = require('react-dom');

var W = require('shadow-widget');
var main = W.$main, utils = W.$utils, ex = W.$ex;

// write your code here ...

});
</script>
```

紧随其后，我们可以插入如下 script 段，用于预设 `W.__debug__` 的值：

``` html
<script>
W.__debug__ = 1;
</script>
```

将非 `0` 整数值赋给 `W.__debug__` 表示启用 Shadow Widget 的调试开关，若赋 `0` 值则关闭调试开关。缺省情况下 `__debug__` 是关闭的，当此开关打开后，系统内部将实施更多的条件检查，当有错误或警告时，相关信息将在浏览器控制台打印。

开发者视需要还可以定义调试级别，比如用 `W.__debug__ = 9` 指定级别为 9，编程时可以依据不同级别做不同深度的检测，各级别具体含义由开发团队自行约定。

开发者还可在被测主页的 React 根节点（即 id 为 `"react-container"` 的节点），用属性设置 `__debug__` 值，比如：

``` html
<!-- BEGIN OF CONTAINER, DO NOT CHANGE THIS LINE. -->
<div id="react-container" __debug__="1">
  <div $=BodyPanel key='body'>
  </div>
</div>
<!-- END OF CONTAINER, DO NOT CHANGE THIS LINE. -->
```

#### 使用两个为调测服务的 API

打开 `__debug__` 开发后，W 树中各个 W 节点（注意：不是 R 节点，参见 [W节点与R节点](#2.2.3.) ）将多出两个 API 可用于调测：

1. `widget.queryById(id)`   
所有 W 节点在创建时，系统都给它分配一个唯一值序号，记录在 `widget.$id` 属性中，本 API 用于在 widget 节点下找到指定 id 号的 W 节点。例如：   
&nbsp;&nbsp;&nbsp; `console.log(W.body.$id);`   
&nbsp;&nbsp;&nbsp; `wdgt = W.queryById(10);`   
&nbsp;&nbsp;&nbsp; `comp.widget.queryById(12);`

2. `widget.addShortcut(sApi,sApi2, ...)`   
addShortcut 用于往 W 节点添加若干在 R 节点定义的类方法，例如：   
&nbsp;&nbsp;&nbsp; `W.body.addShortcut('setChild','componentOf');`   
&nbsp;&nbsp;&nbsp; `console.log(W.body.componentOf('top'));`

调用 `addShortcut()` 后，诸如 `W.body.component.componentOf()` 可以简写为 `W.body.componentOf()`，书写调测脚本变方便了。

#### 使用 `W.$dataSrc`

`W.$dataSrc` 用于给 R 节点附加数据源，系统导入转义标签会自动捆绑在 `W.$main` 定义的投影类，此时，如果 `W.$dataSrc` 也为相关节点定义了若干属性，这些属性也自动被添加。

举例来说，假设 `.body.top.p.btn` 是一个按纽，预定义如下代码：

``` js
  var dataSrc = W.$dataSrc = {};

  main['.body.top.p.btn'] = {
    $onClick: function(event) {
      console.log(this.duals.msg);
    },
  };

  dataSrc['.body.top.p.btn'] = { 'dual-msg': 'Hello, world!' };
```

系统运行后，点击这个按钮，您将发现该节点的 `duals.msg` 值将正确被打印。

`W.$dataSrc` 缺省值为 `undefined`，含义为 “不附加任何数据源”，我们须用赋值语句 `W.$dataSrc = {}` 启用它。而且，是否启用 `W.$dataSrc` 不依赖于 `W.__debug__` 取值，您既可以在调试或测试时用它，甚至可以在正式发行版中用它。不过 `W.$dataSrc` 在可视设计器中并不生效。

被附加的属性数据等效于在转义标签中直接定义，因为附加数据可从界面定义剥离，很符合调测口味，所以，我们常用它构造自动化测试框架。

#### 启用 `__nobinding__` 开关

如 ["idSetter预定义"](#3.4.4.) 一节介绍，使用 idSetter 函数与在 `W.$main` 定义投影类等效，当开发者只用前者 idSetter，而没用后者时，为了加快页面首次打开的速度，不妨启用 `__nobinding__` 开关。

按如下方式启用该开关：

``` html
<script>
W.__nobinding__ = 1;
</script>
```

这与启用 `W.__debug__` 类似，同样，在 React 根节点用 `__nobinding__` 属性也能启用它。

`W.__nobinding__` 缺省取值为 "非真"，当它取真值时，表示系统导入转义标签时，将忽略捆绑 `W.$main` 中定义的投影类，所以，运行效率有所提高。

&nbsp;
