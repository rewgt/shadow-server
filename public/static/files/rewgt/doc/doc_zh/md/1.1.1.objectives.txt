1.1.1 两大设计目标
-----------------------

&nbsp;

Shadow Widget 尝试系统性的解决两大问题：

1. **支持可视化编程**    
&nbsp;   
React 提供 JSX 语法能方便的将 DOM 树用一种伪代码形式表现出来，并允许与 javacript 上下文中定义的实体（如变量与函数）直接交互。即：JSX 语句是混入常规 Javascript 语句中的，尽管用它编程非常方便。但缺陷也很明显：表达界面的代码（主体是 JSX，也相当于前端原生编程中的 html + css）与业务支持代码（主体是 javascript）缺少良好隔离，导致基于 React 的技术体系普遍难以支持可视化编程。若选 react 做开发，通常全程都在编码，而不能象 Delphi 或 Qt 那样，可将应用开发划分为 “界面可视化设计” 与 “编码实现” 两大部分。   
&nbsp;   
Shadow Widget 首先着眼于让 React 这种强烈函数式特征的技术，也能很好的支持可视化用户界面设计。   
&nbsp;

2. **适应前端开发中的技术分层与人员分工**   
&nbsp;   
前端软件开发越来越复杂了，多年前，我们只需学习 html 标签，了解一些 css，会用 javascript 就能胜任前端开发，如果再用一下 jQuery 就能把工作做得更简单、更漂亮，现在的前端开发俨然已成大系统、大平台的分工协调作。就 react 技术体系而言，react 自身只能算与 DOM 对等的类库，把它用好还得有 Flux 架构与不可变数据支持（如 immutable.js），要从 reflux、redux 等库中选一种来构造单向数据流机制。之后，把各层 React component 组成APP，要有导航与动态选用 component 的机制，似乎 react-router 无法略过。用 react 做开发，不可略过的还有 ES6 与各种打包工具，babel、watchify、browserify、webpack 等，一个坑接一个坑要跨过去。   
&nbsp;   
解决问题的手段变复杂，这本身不是问题，因为待解决的问题本身很复杂，目前所有 GUI 开发系统都很复杂。react 的特殊之处在于：描述 GUI 的 JSX 本身就是代码（只不过这种代码经过预处理才翻译成 javascript），所以，它做不到像 Angular 或 Vue 那样，重用 DOM 并借助标签中的 `if, for` 等指令便捷的描述界面，让界面设计与其底层代码分隔开来。这个缺陷引发了一系列负面效果，概括来讲，前端 react 开发人员人人都要成为专家，学用 react 的台阶其实很高，尽管入门很简单。   
&nbsp;   
Shadow Widget 所构筑的技术体系，将前端开发划分为两大部分：构件（Widget）开发与界面（GUI）开发。前者要求开发者具备完整技能，后者则只需简单技能，即：会用 html、css、javascript，掌握 react 入门知识，借助界面可视化设计器很快就能胜任工作。也就是说，我们预设前端开发人员至少可分两类，一类是入门级的，实习生水准，他主要工作是拿别人已开发好的构件搭积木，另一类是高级工程师，他为前一类开发者开发构件。

&nbsp; 

Shadow Widget 尝试解决上面两大问题，这也成为它的两大设计目标。当下前端开发大致有两个流派，其一以 Angular、Vue 为代表，风格偏向静态、指令式、描述性，其二以 React 为代表，采用虚拟 DOM，风格偏向动态与函数式。Shadow Widget 尝试调和这两者界限，集两者优势于一身，底层基于 React，动态函数式是它的固有特点，但我们也封装出一个解析层，来支持以指令方式描述 GUI 用户界面。

&nbsp;
