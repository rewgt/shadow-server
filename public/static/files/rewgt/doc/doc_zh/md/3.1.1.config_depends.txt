3.1.1 创建空白工程
------------------

&nbsp;

从本节起，开始介绍如何以 “创建工程的方式” 开发 Shadow Widget 程序，创建工程是搭建 Bable 转译环境所必须的环节。 

前端开发分为构件（Widget）开发与界面（GUI）开发。后者只需简单技能，前者要用 ES6+ 封装 WTC 类，要求完整技能。本手册重点介绍如何封装 WTC，以及本体系深入些的知识，如何调试、测试、扩展界面库等。

#### 版本兼容性

由于 React 从 V15.5.0 版本开始把 `React.createClass` 移出到 `create-react-class` 模块，这引入了如下不兼容性：

1. Shadow Widget 库增加 `create-react-class` 依赖库   
在 package.json 文件中增加 `"create-react-class": "^15.5.0"` 项目
2. Shadow Widget 库内部改用 `require('create-react-class')` 获得 `React.createClass`   
因涉及 `require` 导入，Babel 转译无法让 React 15.5.0 以后版本与之前兼容。
3. **在网页文件导入 CDN 库时增加 `create-react-class`**   
在导入 `react` 与 `react-dom` 库后，增加语句：`<script src='path/to/create-react-class.min.js'></script>`

为顺应 React 升级，**Shadow Widget 用 v1.0.5 以前版本支持 React v15.4 以前版本，用 v1.1.0 以后版本支持 React v15.5 以后版本，而且，React v15.x 以前版本在 Shadow Widget 1.1.0 以后不再支持。**（说明：React 为了兼容，在 v16 推出前 `React.createClass` 仍可用，所以，Shadow Widget 1.0.5 以前版本仍实际支持 React v15.x 所有版本，只不过针对 React v15.5+ 有告警提示。）

上面所列 3 个不兼容项，前两项已被 shadow-widget 发布件屏蔽（用户不必再关注），只有第 3 项需要用户在网页文件手工添加。

后面举例，我们以 Shadow Widget v1.1.0 以后版本为准。

#### 新建一个空白工程

假定您已安装 shadow-widget 软件，在命令行终端进入安装路径的 `shadow-server/public/static` 子目录，我们演示用工程都保存在那里。依次执行如下命令：

1) 创建工程目录 sample_dev

``` bash
  mkdir sample_dev
  cd sample_dev
```

2) 创建 package.json，这个文件以后还可再改，`npm init` 交互提示您输入项目信息，为简单起见，先用缺省值，一路回车。

``` bash
  npm init
```

3) 添加依赖库

``` bash
  npm install --save-dev babel-preset-es2015 babel-preset-react babelify
  npm install --save-dev watchify
  npm install --save react@^15.5.0
  npm install --save react-dom@^15.5.0
  npm install --save shadow-widget@^1.1.0
```

其中，babelify 用于把 ES6 代码转译为 ES5，babel-preset-es2015 与 babel-preset-react 是转译必需的两个组件，watchify 封装了 browserify，能识别工程源码是否更改，若更改自动启动转译。babelify 与 watchify 只服务于开发过程，不打包到被开发软件的发行版本。

有 4 个库（react、react-dom、create-react-class、shadow-widget）是当前工程所依赖的基础库，最终要打包到发行版本中。

4) 编写入口文件 index.js，在当前工程目录创建 index.js 文件，拷贝如下内容到这个文件：

``` js
'use strict';

var useBrowserify = false, useWebpack = false;
var reactRequire_ = arguments[3], reactModules_ = arguments[4], reactExport_ = arguments[5];
if ((typeof reactRequire_ == 'function') && reactModules_)
  useBrowserify = true;
else if (typeof __webpack_require__ != 'undefined' && __webpack_require__.c)
  useWebpack = true;

var React, ReactDOM, W;
if (useBrowserify) {
  try {
    React = require('react');
  } catch(e) {
    if (React = window.React)
      reactExport_['react'] = { exports:React };
  }
  try {
    ReactDOM = require('react-dom');
  } catch(e) {
    if (ReactDOM = window.ReactDOM)
      reactExport_['react-dom'] = { exports:ReactDOM };
  }
  try {
    W = require('shadow-widget');
  } catch(e) {
    if (W = window.W)
      reactExport_['shadow-widget'] = { exports:W };
  }
}
else if (useWebpack) {
  React = require('react');
  ReactDOM = require('react-dom');
  W = require('shadow-widget');
}
else console.log('fatal error: unknown package tool!');

// write your code here ...

var exportModules = {
  react: React,
  'react-dom': ReactDOM,
  'shadow-widget': W,
};

if (useBrowserify) {
  Object.keys(exportModules).forEach( function(sName) {
    reactExport_[sName] = { exports:exportModules[sName] };
  });
  
  // regist pseudo module, module ID is fixed to 9999
  reactModules_[9999] = [W.$utils.loadingEntry,reactModules_[1][1]];
  setTimeout( function() {
    if (!W.$main.isStart) {
      W.$main.isStart = true;
      reactRequire_(reactModules_,reactExport_,[9999]); // load pseudo module
    }
  },300);  // delay, wait main modules ready and let window initial event run first
}
else if (useWebpack) {
  // regist pseudo module, module ID is fixed to 9999
  var module = { exports:{}, id:9999, loaded:true };
  __webpack_require__.c[9999] = module;
  
  setTimeout( function() {
    if (!W.$main.isStart) {
      W.$main.isStart = true;
      W.$utils.loadingEntry( function(nameOrId) { // wrap require()
        if (typeof nameOrId == 'number')
          return __webpack_require__(nameOrId);   // such as require(1), only used when debugging
        else {
          var ret = exportModules[nameOrId];
          if (!ret)
            console.log('can not find module: ' + nameOrId);
          return ret;
        }
      }, module,module.exports);
    }
  },300);
}
```

5) 在 package.json 中定义 start 命令用于启动 watchify，合入如下代码：

``` js
  "scripts": {
    "start": "watchify index.js -v -o bundle.js -t [ babelify --presets [ es2015 react ] ]"
  },
```

以上 5 步操作的目的是为了生成一个工程环境，您还可从官方提供的样板工程（rewgt/sample_dev）直接克隆，效果是一样的。克隆过程如下：

``` bash
  git clone https://github.com/rewgt/sample_dev.git
  cd sample_dev
  npm install
```

#### 运行 watchify 监听源文件更改并自动转译 ES6 到 ES5

用如下命令启动监听并转译：

``` bash
  npm start
```

转译打包输出的文件是 bundle.js，在当前工程目录下能找到。

#### 编写 index.html 做测试

在工程目录下新建 index.html 文件，并拷贝如下内容（如果当前工程是从官方样板工程克隆来的，本文件早已存在）：

``` html
<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<meta property="pinp:template" page="Panel" content="/app/files/rewgt/web/templates/Panel">
<meta property="pinp:template" page="P" content="/app/files/rewgt/web/templates/P">
<meta property="pinp:template" page="Span" content="/app/files/rewgt/web/templates/Span">
<meta property="pinp:template" page="Linker" content="/app/files/rewgt/web/templates/Linker">
<meta property="pinp:template" page="Nav" content="/app/files/rewgt/web/templates/Nav">
<meta property="pinp:template" page="Md" content="/app/files/rewgt/web/hint_marked.html">
<title>shadow-widget sample</title>
</head>
<body>

<!-- BEGIN OF CONTAINER, DO NOT CHANGE THIS LINE. -->
<div id="react-container" style="visibility:hidden; position:absolute; left:0px; top:0px">
<div $=BodyPanel key='body'> 
  <div $=Panel key='top' height='{null}'>
    <div $=P key='p'>Hello, world!</div>
  </div>
</div>
</div>
<!-- END OF CONTAINER, DO NOT CHANGE THIS LINE. -->

<script>
if (!window.W) { window.W = new Array(); W.$modules = [];} W.$modules.push( function(require,module,exports) {

var React = require('react');
var ReactDOM = require('react-dom');

var W = require('shadow-widget');
var main = W.$main, utils = W.$utils, ex = W.$ex;

});
</script>

<link rel="stylesheet" shared="true" href="/app/files/rewgt/web/css/sw_base.css" />
<script src="bundle.js"></script>

</body>
</html>
```

之后，在浏览器中打开 `http://localhost:3000/sample_dev/`，看看是否正确显示 `"Hello, world!"` 信息。

当然，您需事先启动 Shadow Widget 的本地 WebService 服务，可以这么操作：另启一个命令行终端，进入安装路径的 `shadow-server` 目录，运行 `npm start` 即可，参见前面已介绍的 [“简单示例”](#1.1.4.) 一节。

&nbsp;
