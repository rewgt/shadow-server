3.2.2 CSS 命名
-------------

&nbsp;

Shadow Widget 对如何使用 css 没特别要求，用户可以手工编写 css 文件，或经 SASS、LESS 等转换 css，或采用 “CSS in JS” 方案。不过，除 CSS in JS 外，其它方式都避免不了要定义 css 类，css 类名全局生效，命名冲突难以避免。

为减缓命名冲突，Shadow Widget 对 css 类命名有若干建议。

####  props.className 与 duals.klass 的组合

React 的 className 属性在 Shadow Widget 中分割为两块：props.className 与 duals.klass，前者为不变量，要求在构件的生存周期内不发生变量，后者是状态量，随时变化。两者形成组合关系，前者可以独立应用，但后者从属前者，通常依赖前者定义样式。

比如，我们设计一个扁平风格的按钮，className 为 `flat-btn`，klass 指定若干状态，如 `default-red-blue`、`default-hover` 等，相关 css 定义如下：

``` css
  .flat-btn {
    border: 1px solid gray;
    border-radius: 8px;
    background-color: #eee;
    color: #222;
  }

  .flat-btn.red-blue-default {
    border: 1px solid red;
    background-color: #d00;
    color: white;
  }

  .flat-btn.blue-default-red {
    border: 1px solid blue;
    background-color: #00d;
    color: white;
  }

  .flat-btn.hover-default {
    opacity: 0.5;
  }
```

上述 css 定义的主要特点是：
1. 在 className 指定的主特征类（如上面 `flat-btn`），定义该种构件的缺省 css 样式
2. 在 klass 使用可切换类（也称状态类），如 `default-red-blue, red-blue-default, blue-default-red` 成一组，对应可切换的 3 种状态。   
`red-blue-default` 定义红色风格的按钮，`blue-default-red` 定义蓝色风格，因 `default-red-blue` 缺省风格（灰色）已在 `flat-btn` 类中定义，所以无须额外定义。
3. 状态类不独立定义，附在主特征类后使用，比如上面 `.flat-btn.red-blue-default { }` 。

####  合理规避重名

如果在开发中我们遵守 **“所有状态类都不独立定义 css 样式”** 的规则，css 类名冲突通常只取决于主特征类如何命名了。

如果您开发的项目仅供自己使用，自行选择一种方法降低重名机率即可，比如划分若干功能模块，不同模块使用不同前缀。

但对于开发中间组件，对外提供一种 lib 库应用时，Shadow Widget 规定一种命名风格，如果大家都遵守这个规则，基于 Shadow Widget 开发的各式组件是很容易捏合重用的，规则很简单，就一句话：**主特征类命名要以在 pinp 社区注册的账户名作前缀**。

比如 Shadow Widget 的作者在 pinp 社区注册的账号是 `rewgt`，所以定义类似 `rewgt-panel`、`rewgt-table` 那样的 css 类，各个名称都以 `rewgt-` 作前缀。因为 pinp 社区限定账户名至少有 4 个字母，所以，小于等于 3 个字母的前缀用户可以自由选用的，如 `usr-`、`log-` 等。

各个中间组件开发商专享以自身账户名作前缀的命名方式，通常他还要用 `'-'` 连接多段名称，如何规划完全自行决定。

主特征类还可组合，如 `my-button` 是主类，定义 `.my-button.flat-btn` 或 `.my-button.d3-btn` 同样视作主特征类，即：className 属性可包含多个类名，如 `'my-button flat-btn', 'my-button d3-btn'` 等，这里的 `flat-btn` 与 `d3-btn` 我们称为 “主类附加类”。

#### CSS 类定义顺序

CSS 类定义顺序会影响实际效果，同名属性后定义的会覆盖先定义的。一般而言，我们先定义主特征类，然后定义主类附加类，接着是状态类，通用状态类靠前，越专用的状态类越靠后定义，如果部分属性在两种状态类中都定义了，专用的应该覆盖通用的。

另外，慎用 `"#id { }"` 定义 css，也是一种良好习惯，除非这么定义的 css 属性与若干 css 类组合使用无交叉，因为指定 ID 的 css 定义会打破先后顺序关系，常有你意想不到的事情发生。

&nbsp;
