5.3.4 扩展可视编辑插件
------------------

&nbsp;

#### 在 WTC 类中定义工具集

上一节介绍了在构件样板中如何定义工具集，下面介绍用户自行开发 WTC 类时，如何定义本 WTC 类缺省的工具集。

在可视设计器里，一个构件被选中，如果它没定义扩展工具集 ID 时（即该节点没定义 `data-group.optid` 属性值），系统自动调用选中构件 WTC 类的 `_getGroupOpt` 方法，调用 `_getGroupOpt()` 要求返回如下格式的数据：

``` js
  {
    type: sType,           // 'mono', 'extend'
    editable: sEditable,   // 'all', 'some', 'none'
    baseUrl: sBaseUrl,
    tools: [toolConfig, ...],
  }
```

其中，`type` 指示扩展类型（目前固定使用 `'mono'`），`type` 与 `editable` 合起来就是上一节介绍的 `opt`，另外，`baseUrl` 与 `tools` 的含义请参考上一节介绍。

也就是说，用 WTC 的 `_getGroupOpt` 方法定义浮动工具按钮，与在 `TOOL.json` 文件定义基本等效。尽管如此，由 `_getGroupOpt()` 返回的 `tools` ，其中各个 `toolConfig` 须定义如下两个函数：

```
  toolConfig.get(component)
  toolConfig.set(component,outValue,beClose)
```

前者 get 用于动态获得待编辑项目（即传递给弹窗编辑器的 `inValue`），返回值要求用 Array 数组格式，若返回 `null` 值，后续操作将被忽略。后者 set 用于保存已编辑项目。其中 `set` 函数的参数 `outValue` 是编辑结果，`beClose` 指示当前触发保存的是否为 “关闭弹窗” 操作。

因为弹窗与主窗之间用 message 消息方式交互，被编辑的数据要求能转换为 JSON 字串，类型为 `function` 的函数体不能被编辑。

#### 缺省的 get 与 set 函数

调用 WTC 的 `_getGroupOpt()` 返回浮动按钮的操作定义，各项操作的 `toolConfig.get` 与 `toolConfig.set` 函数可以自行定义，但在 `TOOL.json` 中 `tools` 提供的各项操作并不定义这两个回调函数，系统将自动采用缺省的 get 与 set 函数（见源码 `online_design.js` 中 `defaultPluginGetSet` 函数）。

缺省的 get 函数返回值格式为 `[props,sPath,widgetOption]`，`props` 是待编辑属性项，`sPath` 是被选中构件的绝对路径，`widgetOption` 记录被选节点的附加信息，如 WTC 类的 `_className, _classDesc, _docUrl` 等。对于缺省的 set 函数，参数 `outValue` 格式要求是 `[isChanged,props,removeList]`，其中 `isChanged` 取值 `true` 或 `false`，指示输入数据有无修改，`props` 是编辑后的数据，`removeList` 为 array 类型，是本次编辑已删除的属性名列表。 

`toolConfig.get` 的返回值与 `toolConfig.set` 的 `outValue` 参数，代表了弹窗编辑器的输入与输出数据，其格式可由用户自行指定，缺省的 get 与 set 函数指定了一种格式，开发者在 `_getGroupOpt()` 中须定义各项操作的 get 与 set 函数，输入输出内容均自行定义，因为弹窗 Web 页是自主开发的，只要弹窗处理的输入与输出格式符合设计者预先约定即可。

#### 编辑器弹窗与主设计界面的交互过程

用户在主设计区选中一个构件，点击某个浮动按钮，自定义编辑窗口在弹出并预备内容之前，系统经历如下处理：

1. 从工具集的 tools 定义中找到相应的 `toolConfig` 配置项
2. 调用 `toolConfig.get()` 获得待编辑项目 `inValue`，并分配一个 `taskId` 唯一序号   
任务序号用于校验，用来确保上下文相关的修改操作才能生效。
3. 系统根据 `toolConfig` 中的配置，如 `"halfScreen, noMove, left, top, width, height"` 等弹出弹窗，等待弹窗打开 `toolConfig.url` 指定的网页。
4. 弹窗中的网页读入后，弹窗向父窗发送这个请求 `{method:'onDialogLoad',param:[]}`
5. 父窗收到请求后，查询当前被编辑网页用到哪些共享的 css 文件（即找出 `<linker shared="true">` 节点，参见 [“用户扩展 CSS 文件”](#2.7.2.!user_link)），得到变量 `cssList`
6. 父窗向弹窗发送命令 `{method:'init',param:[taskId,inValue,cssList]}`
7. 弹窗收到命令后，把待编辑项目（数据在 `inValue` 中）展示出来，必要时需把记录在 `cssList` 中的 CSS 文件通过添加 `<link>` 节点逐一导入进来，因为展示被编辑的内容可能需要相关 CSS 定义

现在编辑器弹窗已就绪，用户在界面可以开始编辑了。

当编辑完成，用户在弹窗区域之外用鼠标点击（表示要关闭弹窗），随后系统经历如下处理：

1. 父窗向弹窗发送命令 `{method:'close',param:[true]}`，其中 `true` 表示 `isClose` 参数取真值，`isClose` 指示当前操作是否尝试关闭弹窗
2. 弹窗收到命令后，分析是否要关闭自身   
如何关闭弹窗依赖于 3 项判断，一是关闭的命令来自父窗，还是自身弹窗的 Close 按钮被点击，二是当前操作是 “关闭弹窗” 还是 “取消修改”（即点击弹窗内的 Cancel 按钮），三是当前修改值是否合规。系统综合 3 项判断后得出 “继续操作” 还是 “取消操作” 的结论，如果 “继续操作”，后面步骤将继续执行，否则取消。 
3. 弹窗向父窗发送请求 `{method:'onDialogExit',param:[isClose,needSave,taskId,outValue]}`   
其中，`isClose` 指示当前操作是否关要闭弹窗，`needSave` 指示当前修改是否要保存，`taskId` 是弹窗接收父窗 `init` 命令时传入的那任务序号，`outValue` 是当前编辑结果，在下一步操作将传给 `toolConfig.set()` 调用。
4. 父窗收到请求后，关闭弹窗（如果 `isClose` 为真的话），并进行保存（如果 `needSave` 为真的话），通过调用 `toolConfig.set()` 保存当前更改。

#### 如何定制自己的编辑器弹窗

上面介绍一个自定义弹窗编辑器的运行原理，定制一个编辑器主要做两件事，其一，准备工具操作项定义，即 `toolConfig`，格式见 [上一节介绍](#5.3.3.!tool_config)，若在 `_getGroupOpt()` 定义，另加 `get` 与 `set` 回调函数。

其二，开发一个弹窗 Web 页（由 `toolConfig.url` 指向该文件），因为弹窗与其父窗的交互过程，父窗已固定（不建议修改它的源码 `online_design.js`），弹窗则全新开发，所以，定制的重点是在弹窗 Web 页中处理如下事务：

1. 弹窗 Web 页导入后，向父窗发送 `{method:'onDialogLoad',param:[]}` 信息
2. 弹窗收到父窗发来的 `{method:'init',param:[taskId,inValue,cssList]}` 信息后，初始化显示界面
3. 弹窗中处理 3 种关闭操作（来自父窗的 `{method:'close',param:[true]}` 消息，在弹窗内点击 Cancel 按钮，在弹窗内点击 Close 或 Apply 按钮），需要关闭时通知父窗 `{method:'onDialogExit',param:[isClose,needSave,taskId,outValue]}`

大家可以用 Shadow Widget 缺省的属性编辑器，结合源码来理解弹窗与父窗的交互过程，父窗源码在 `"/files/rewgt/js/online_design.src.js"`，属性编辑器源码在 `"/files/rewgt/edit_prop.html"`。下图是属性编辑器弹窗的界面形式：

![property editor](md/res/edit_json_prop.png)

自行定制编辑器弹窗时，通常只编辑某一项（或数项）属性值，而不是全部属性值，不妨从缺省的属性编辑器为起点做移植，该编辑器的 JS 源码仅 200 行。

#### 仅在定制的弹窗编辑器可改的属性

特定情况下，我们希望让构件的某个属性不要出现在主设计窗口右侧的 property 页中，只能在自行定制的弹窗编辑器中才能修改。

Shadow Widget 支持这种需求，但要求将属性命名成 `"segment1.segment2"` 的格式，即，用 `'.'` 字符分隔两段常规命名，两段合起来作为一个属性名使用。这种属性名不会出现在 property 页中，但通过编程手段，弹窗编辑器能用脚本自由存取。

如前面介绍 `toolConfig` 的规格，对于系统缺省提供的 get 与 set 函数，输入 `inValue` 格式为 `[props,sPath,widgetOption]`，输出 `outValue` 格式为 `[isChanged,props,removeList]`。用 `inValue` 中的 `widgetOption["segment1.segment2"]` 可取得该属性的当前值，编辑后，结果值要记录在 `outValue` 中的 `props["segment1.segment2"]`。

#### 接收从 resource 页中拖入的资源文件

如果在界面设计中，支持从右侧 resource 页直接拖入文件，比如图片、json文件、文本文件等，拖入到设计区选中的构件上，实现特定编辑功能（比方替换缺省图片）。这样，设计操作大为简化，也很直观。

怎么做到呢？首先我们要理解，在设计区显示的构件，实质就是 `W.__design__` 为真，投影定义未捆绑时的产品 GUI。该 GUI 如何表现，构件开发者有很大自由度按自己设想去定制，比如，为构件定义 ondragover 与 drop 事件来处理文件拖入操作。其次，从 resource 页拖入的资源有特定格式，动态识别，动态决定是否允许拖入，drop 时用 `event.dataTransfer.getData()` 取得拖入资源的详细信息。

从 resource 页拖入 `*.json.svg` 样板文件时，系统自动在 `event.dataTransfer` 设置如下信息：

``` js
  var json = JSON.stringify({dragType:'template', dragUrl:sUrl, option:_widget});
  event.dataTransfer.setData('text/plain',sUrl);
  event.dataTransfer.setData('application/json',json);
```

拖入图片文件时，系统自动在 `event.dataTransfer` 设置如下信息：

``` js
  var sMeta = 'image/png';  // png, jpeg, gif, x-icon, svg+xml
  var json = JSON.stringify({dragType:'image', dataType:sMeta, dragUrl:sUrl});
  event.dataTransfer.setData('text/plain',sUrl);
  event.dataTransfer.setData('text/uri-list',sUrl);
  event.dataTransfer.setData('application/json',json);
```

拖入其它文件时，系统自动在 `event.dataTransfer` 设置如下信息：

``` js
  event.dataTransfer.setData('text/plain',sUrl);
  event.dataTransfer.setData('text/uri-list',sUrl);
```

如果可视化编辑要依赖显示在设计区的构件提供的功能（如定义 ondrop 事件、ondblclick 事件等），只能在 WTC 类定义时由 `_getGroupOpt()` 返回工具集定义，在相应的 `toolConfig.get` 与 `toolConfig.set` 函数进行读写定制。不妨研究一下系统内置构件 MarkedDiv 如何实现 markdown 文本定制编辑的，源码请见 `template.js` 中的 TMarkedDiv_ 类定义。MarkedDiv 还预定义 `props['noSaveChild.']` 值为 `true`，用来标记它的子成员不必存盘，因为都是动态生成，`"noSaveChild."` 参数在自定义扩展时比较有用。

#### 两份开源项目供参考

本章粗略的介绍了自定义弹窗编辑器如何实现，实践中大家还需阅读 shadow-widget 工程中相关源码。Shadow Widget 官方还有 <a target="_blank" href="https://github.com/rewgt/shadow-book">shadow-book</a> 与 <a target="_blank" href="https://github.com/rewgt/shadow-slide">shadow-slide</a> 两个开源项目，可供大家对照着学习、借鉴。

shadow-book 工程体量很小，它在资源页中封装两个样板 `book_summary` 与 `book_content`，可用来学习样板文件如何编制。shadow-slide 提供类 PPT 编辑器，有许多定制的构件与弹窗编辑器，适合用来深入学习。

&nbsp;
