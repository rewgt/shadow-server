5.3.3 定制浮动工具条
----------------

&nbsp;

#### 标识扩展工具集

Shadow Widget 的可视化设计器在两方面提供给第 3 方定制：
1. 支持 “资源页” 定制，参见 [“组织资源页”](#5.3.1.) 与 [“设计样板文件”](#5.3.2.) 两节内容。
2. 允许第 3 方扩展编辑器弹窗，让特定节点在选中后能用定制的弹窗修改属性。

原生 React 节点的界面特性，主体由传入 props 属性决定，少量由动态 state 属性决定。Shadow Widget 在此基础上，引入双源属性概念，让 “决定界面表现的 state 属性” 纳入到 duals 双源属性集合中，然后可视设计器为各构件的初始 “传入属性” 及动态可读写的 “双源属性” 提供属性编辑器，成为通用、可视的，在线编辑界面元素的解决方案。

Shadow Widget 规范定义读写构件属性的规格，把属性编辑器的定制能力开放出来，让通用的可视化编辑器，演进为广泛可定制的界面设计器。

当众多厂商提供大量辅助界面设计器时，我们的插件系统要管理它们。插件被管理的基本单位是 “工具集”，也就是定义某个构件样板后，附加定义它浮动工具条上提供哪些按钮。每个工具集都由唯一 ID 标识，然后在该厂商所公开工程的根目录下 `TOOL.json` 文件中，定义各个工具集详细配置。

工具集唯一 ID 采用路径形式表达，比如：

```
   rewgt/shadow-book/summary
   rewgt/shadow-book/content
   rewgt/shadow-slide/steps
```

全路径名用来唯一定位工具集，其首段是厂商名，上面 3 项的厂商均为 rewgt。为保证工具集唯一被定位，Shadow Widget 要求所用的厂商名唯一（要求只用 PINP 社区的注册名）。厂商名之后是工程名，如上面 `"shadow-book"` 与 `"shadow-slide"`，工程名之后是工具集名称，如上面 `"summary", "content", "steps"`。厂商名与工程名用来推导 `TOOL.json` 位置，如上面两工程对应 URL：

```
    /app/rewgt/shadow-book/web/TOOL.json
    /app/rewgt/shadow-slide/web/TOOL.json
```

工具集 ID 名至少有三段，要求能从中找出厂商名、工程名、工具集名，找不出这三者就不是合法的工具集 ID。

通常我们将第 3 方共享的工程克隆到本地，与 shadow-server 工程（它为 Shadow Widget 提供本地 WebService 服务）同处一级，之后该第 3 方工程提供的可视编辑器就能正常供使用了。

用户在资源页拖入样板文件来创建一个构件时，工具集 ID 在样板文件中用 `_widget.name` 记录，如果 `_widget.name` 名称不是合法的工具集 ID（比方只有一段，没定义多段），表示当前创建的构件不采用定制的工具集，它的浮动工具条未经定制，只用缺省浮动按钮，也就是由 WTC 内置定义来决定工具条如何显示（参见 [下一节](#5.3.4.)）。

拖入样板文件创建构件后，工具集 ID 将保存到被编辑文档的相应 HTML 标签中（在 `data-group.optid` 属性记录），下次打开文档再次编辑时，可视设计界面根据此 ID 值，从相应的 `TOOL.json` 文件找回工具集定义。

#### `TOOL.json` 内容格式

`TOOL.json` 文件用 JSON 格式，记录它所在工程的所有工具集的定义，比如下面定义 `jsonConfig` 配置：

``` json
{
  "lib": {
    "baseUrl": "/app/rewgt/shadow-slide/web/output",
    "tools": [ {
      "name": "step",
      "icon": "step.png",
      "title": "config pre-post step",
      "url": "edit_prepost.html",
      "halfScreen": true,
      "noMove": false,
      "clickable": true,
      "left": 0.05,
      "top": 0.05,
      "width": 0.9,
      "height": 0.9 }
    ]
  },
  
  "rewgt/shadow-slide/steps": {
    "opt": "mono/all",
    "tools": [ "lib/step", "*" ]
  }
}
```

该 JSON 文件记录两类信息，一类是 tools 操作定义，如上面 `jsonConfig.lib.tools` 定义，一类是 tools 操作引用，如上面 `jsonConfig["rewgt/shadow-slide/steps"].tools`，这里 `"rewgt/shadow-slide/steps"` 是工具集 ID。前一类须定义 `baseUrl` 属性，以此标明它是操作定义。

<a name="tool_config"></a>
当拖入样板文件创建一个构件时，系统得到一个工具集 ID 值，然后到 `TOOL.json` 文件检索此 ID，比如找到上面 `"rewgt/shadow-slide/steps"` 定义项，再从该项的 tools 找出各个操作的路径。路径值若为 `"*"` 表示引用当前构件 WTC 定义的原有工具集（用 `WTC._getGroupOpt()` 获取），其它路径值表示从本 `TOOL.json` 文件的定义中查找，比如 `"lib/step"`，将从 `jsonConfig.lib.tools` 下找到 `name` 为 `"step"` 的项目，系统最终获得如下定义：

``` js
  {
    name: "rewgt/shadow-slide/steps",
    opt: "mono/all",
    tools: [ {
      baseUrl: "/app/rewgt/shadow-slide/web/output",
      name: "step",
      icon: "step.png",
      title: "config pre-post step",
      url: "edit_prepost.html",
      halfScreen: true,
      noMove: false,
      clickable: true,
      onlyScene: true,
      left: 0.05,
      top: 0.05,
      width: 0.9,
      height: 0.9 },
      
      // other toolConfig ...
    ]
  }
```

各属性项解释如下：

A) `name`，工具集唯一 ID

B) `opt`，选中后，其下级成员是否可编辑，有 3 种选择：

1. `"mono/all"`，所有子级成员均可编辑，包括：增、删、改，可计算属性也可修改
2. `"mono/some"`，允许可视编辑器修改子成员属性（可计算属性除外），不能增删子成员
3. `"mono/none"`，可视编辑器不能增、删子成员，也不能修改子成员的属性

C) `tools`，用数组 `[toolConfig, ...]` 定义各项操作，其中 `toolConfig` 中各属性含义如下：

1. `baseUrl`，给出特定操作的 URL 基址，如 `toolConfig.icon` 与 `toolConfig.url` 可参考此基址简写 URL。
2. `name`，操作名，其中特殊值 `"default"` 表示缺省操作，专给在设计器中双击选中构件时弹出编辑框使用。
3. `icon`，指定浮动按钮的图标。
4. `title`，浮动按钮的提示信息。
5. `url`，弹窗页面的 URL。
6. `halfScreen`，指示弹窗区域（含背景蒙板）是否只用左侧，空出右侧资源页区（以便从资源列表拖入文件），缺省值为 false，表示占用全屏。
7. `noMove`，指示弹窗是否不可移动，缺省为 false。
8. `clickable`，指示该操作是否用浮动按钮表达，取值为 true 表示用按钮，否则不显示按钮（如果是 default 缺省操作，鼠标双击已选中的构件也能召唤此操作）。
9. `onlyScene`，仅 ScenePage 下的构件选中时，才显示本浮动按钮。
10. `left, top, width, height`，指定弹窗位置与大小，`left` 与 `top` 指定弹窗的左上角位置，既可以是像素值（值大于 1）也可以是百分比（取值0~0.9999），如果 `left` 或 `top` 缺省未定义，表示自动居中。`width` 与 `height` 指定弹窗的宽高，既可以是像素值（值大于 1）也可以是百分比（取值0~0.9999），如果未指定，宽与高自动取 `100%`。

说明：

1. 当一个构件用 `'data-group.optid'` 属性指示从 `TOOL.json` 查找扩展工具时，从上述 `opt` 项（值为 `"mono/all"` 或 `"mono/some"` 或 `"mono/none"`）可提取 `editable` 配置值（ `"all"` 或 `"some"` 或 `"none"`），这时，该构件本配置的原定义（即  `WTC._getGroupOpt().editable`）将被覆盖。

2. 当一个构件支持 `duals['html.']` 属性（即 [`WTC._htmlText`](#3.3.2.!special) 为 true），并且它没有子节点定义时，系统自动提供用于编辑 `'html.'` 属性的浮动按钮 ![Edit](md/res/edit_txt.png)，若有子节点，则缺省不提供此项编辑。在特定情况下，比如由程序动态生成子节点，编辑 `'html.'` 的浮动按钮也是需要的，用 `props['data-html.opt']='edit'` 额外指示，可视设计器也会为它提供 `'html.'`  编辑器。

#### 编辑器弹窗与主设计界面的通信机制

编辑器弹窗是一个独立的 Web 页（由 `toolConfig.url` 指定），主设计界面通过 iframe 标签将弹窗 Web 页展示出来，两者之间的通信通过窗口 message 实现。

如下代码用于编辑器弹窗接收消息（无关代码已注释掉）：

``` js
  window.addEventListener('message', function(msg) {
    try {
      if (typeof msg == 'object' && msg.data) {
        msg = msg.data;
        msg = JSON.parse(msg.slice(14)); // remove prefix '[PROJECT_NAME]'
      }
      else msg = null;
    }
    catch(e) {
      msg = null;
      console.log(e);
    }
    
    if (typeof msg == 'object') {  // msg is: {method:'init', param:[...]}
      if (msg.method == 'init') {
        // process 'init' command, ...
      }
      else if (msg.method == 'close') {
        // process 'close' command, ...
      }
    }
  }, false);
```

传递的消息类似于函数调用，比如收到一个命令，`msg.method` 指出命令字（相当于给出函数名），`msg.param` 则用数组给出参数列表。

如果编辑器弹窗要向设计器主界面发送消息，采用如下代码：

``` js
  var msg = {method:'onDialogLoad',param:[]};
  var sCmd = '[PROJECT_NAME]' + JSON.stringify(msg);
  window.parent.window.postMessage(sCmd,'*');
```

同样，用 `msg.method` 指定命令字，用 `msg.param` 指定各个参数。设计器主界面的 message 消息接收与发送，与上面实现类似，原理一样，是对等的。

&nbsp;
