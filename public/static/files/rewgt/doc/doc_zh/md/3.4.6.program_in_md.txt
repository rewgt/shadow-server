3.4.6 结合 markdown 编程
------------------------

&nbsp;

在前面 [“MarkedDiv 构件”](#2.1.5.!marked_div) 我们已介绍一种 markdown 构件，下面我们再介绍一种 markdown 构件：MarkedTable。这两者是 Shadow Widget 内置支持的，最基础的 markdown 构件，如果用户想扩展定制自己的 markdown 文本处理构件，要求从这二者中取一个作为基类。

#### 使用 MarkedTable

MarkedTable 用一段 markdown 格式的文本描述一个表格，比如：

``` html
<pre $=MarkedTable>
row1-col1

row1-col2

---

row2-col1

row2-col2
</pre>
```

这个例子定义一个 `2 * 2` 的表格，markdown 文本所表示的每个自然段，将自动逐一整理到各个单元格，而表格换行，以文本 `---` 描述的 `<hr>` 为标记，如本例的表格，定义了两行。

如果想把多行文本纳入同一个单元格，不妨用 “软换行”，markdown 格式规定：一行若以两个以上空格结尾，表示本行与下一行将串接（即相当于 `<br>` 换行，而不是 block 块换段）。如果想把多个 block 段纳入到同一单元格中，可以嵌套使用 MarkedDiv，比如：

``` html
row1-col1

<pre $=MarkedDiv>
row1-col2

still in row1-col2
</pre>
```

MarkedTable 中用 MarkedDiv 或 MarkedTable 表达一个单元格时，单元节点还可附加定义 `col-span, row-span, td-style` 属性，这三项分别对应于 `<td>` 的 `rowspan, colspan, style` 属性。举例如下：

``` html
<pre $=MarkedTable>
row1-col1

<pre $=MarkedDiv td-style='{{"color":"red"}}'>
row1-col2

still in row1-col2
</pre>

---

row2-col1

row2-col2
</pre>
```

再比如，我们想让当前单元格向右跨越一个单元格（即横向合并两个单元格），在转义标签中用 `col-span='2'` 指明即可。

#### 双源属性 `nodes`

如前面已介绍，我们的 markdown 文本，除了规范的按 markdown 语法要求书写外，还支持用 `<pre $=path>` 插入块引用，“块引用” 本质是 Shadow Widget 的 W 节点。所以，MarkedDiv 与 MarkedTable 描述的内容分两类，一类是 W 节点（块引用），另一类是由原生 markdown 语法表达的静态文本节点。对于前者，系统自动汇总它们并保存到 `duals.nodes` 属性中。

`duals.nodes` 是 array 数组类型，对于 MarkedDiv 而言，`duals.nodes` 是一维数组，而对于 MarkedTable，`duals.nodes` 是二维数据，即：表格行是一维，表格列是另一维，比如 `nodes[0][1]` 指示 `rows[0]` 行 `cols[1]` 列的单元格，各个单元格的值为 `[sKey,element]`，记录它所引用 W 节点的 key 与 Element 值。

`duals.nodes` 不仅记录在 markdown 文本中定义的所有 “块引用”，如果 “块引用” 明确指定 key 值时，还额外按 `nodes[key] = element` 记录索引信息。比如下面例子：

``` html
  <div $=NavPanel $for='' dual-data='{[]}'>
    <pre $=MarkedDiv key='mark' sty__='{{"display":"none"}}' 
      $trigger='["./",{$set:duals("./mark").nodes}]'>
<pre $=P key='first'>First paragraph.</pre>
<pre $=P key='next'>Next paragraph.</pre>
</pre>
    
    <div $=P klass='S4' 
      $html='((duals.data.first||{}).props||{})["html."]'></div>
    <div $=Hr></div>
    <div $=P klass='S5' 
      $html='((duals.data.next||{}).props||{})["html."]'></div>
  </div>
```

先用 MarkedDiv 把两个转义标签（key 分别为 `first` 与 `next`）定义到 `duals.nodes`，接着用 `$trigger='["./",{$set:duals("./mark").nodes}]'` 同步 `duals.nodes` 数据到父级 NavPanel 节点的 `duals.data`，之后用两个 P 节点引用 `duals.data` 数据并展示其内容（两个 P 段落分别用 S4 与 S5 字号显示）。因为只使用 `duals.nodes` 而不必展示 MarkedDiv 的内容，所以用 `display:none` 让它不显示。

样例 demo41 还给出另两个复杂些的应用，一是从 `marked.txt` 文件读入 markdown 文本，而非在 MarkedDiv 节点静态定义，二是用 `$for` 循环表达式，自动展示由 `duals.nodes` 记录的 N 多个子节点，请大家自行参考源码。

#### 使用 `noShow` 与 `$children`

MarkedDiv、MarkedTable 支持用 `props.noShow` 隐藏 markdown 转为 HTML 标签后的内容展示。当用户只用导出到 `duals.nodes` 的属性，而不直接展示由 markdown 描述的内容时，宜在 MarkedDiv 或 MarkedTable 的转义标签中用 `no-show` 指明，比如：

``` html
  <div $=NavPanel height='{100}' $for='' dual-data='{[]}'>
    <pre $=MarkedDiv key='mark' no-show='1'
      $trigger='["./",{$set:duals("./mark").nodes}]'>
<pre $=P key='first'>First paragraph.</pre>
<pre $=P key='next'>Next paragraph.</pre>
</pre>
    <div $=Ul $for='item in duals.data'>
      <div $='Li' $key='"key" + index' $children='item[1]'></div>
    </div>
  </div>
```

这段代码中，MarkedDiv 只用来定义数据源（即 `duals.nodes`），供其它节点引用，用 `no-show='1'` 限定当前节点不显示任何内容，但 markdown 文本解析正常进行。

前面已举例用 `display:none` 隐藏节点，两种方法都能达到目的，但 `props.noShow` 做更彻底缩减，性能也稍高，它将 markdown 所描述的与 `duals.nodes` 无关的所有节点，比如静态文本（不是转义标签格式），一律丢弃了。

在 `$for` 循环展开的下一层节点，常用 `$children` 动态引用特定的 Element，Element 常来源于上述 `duals.nodes`，还可来源于编程中用 JSX 语法动态定义。可计算表达式 `$children` 的计算结果要求符合如下类型：

1. `null`，表示没有子节点
2. `Element`，表示子节点仅此一个 Element
3. `array` 数组，列出多个 Element 用作子节点

Shadow Widget 限定 `$children` 只在 `$for='item in expr'` 之下的节点中使用，另外，如果某节点使用 `$children` 动态计算子节点，就不应再用转义标签描述它的子层节点。

#### 结合 markdown 与 idSetter 进行编程

在 MarkedDiv 与 MarkedTable 的 markdown 文本中，既可以用 `<pre>` 定义转义标签，也可以用 `<div>` 定义，定义的转义标签既可以用 `$=path` 引用外部节点，也可以用 `$=WTC` 指定 WTC 类名，动态创建新节点。总之，这种 markdown 文本能等效的用来描述用户界面。

当我们用 markdown 编写转义标签时，根一层的标签要求用 Panel 类，或 Div 类，或 P类，不能用 Span 类，参见 [“构件类别”](#2.1.6.!widget_type)，因在这一层要承接与 MarkedDiv 或 MarkedTable 并行的布局关系。

另外，在 markdown 中新定义构件宜用 `$id__=path` 的方式，关联在 idSetter 预设的投影定义，参见 [idSetter 预定义](#3.4.4.)。借助 idSetter 动态关联投影定义，markdown 文本就具备完整的编程能力了。

我们常用如下方式随意改造由 markdown 定义的子节点：指定 `props.noShow='1'`，然后在 idSetter 函数中，重新组装 `duals.nodes` ，再调用 `utils.setChildren()` 设置重组过的子节点。比如：

``` js
  this.defineDual('id__', function(value,oldValue) {
    if (value <= 2) return;
    
    var bMenu = this.duals.nodes.map( function(item){return item[1]} );
    utils.setChildren(this, [
      <t.Ul key='menu' >
        {bMenu}
      </t.Ul>
    ]);
  });
```

&nbsp;
