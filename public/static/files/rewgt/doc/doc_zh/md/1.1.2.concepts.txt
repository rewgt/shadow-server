1.1.2 几个概念
-----------------

&nbsp;

1. **构件**（Widget）    
&nbsp;   
构件是 Shadow Widget 可视化编程中的最基础的可视元件，它对 React Component 做封装，通常它可以描述成 JSON 格式的模板文件，在 Shadow Widget 的集成 IDE 界面中可用鼠标将模板文件拖入到当前设计器页面来创建一个构件。构件是可视化，在设计界面中它占据一定长宽的区域，选中该构件后，在属性编辑器中可直接编辑并保存它的属性。   
&nbsp;   
所有构件都是从 React Component 封装而来，但并不是所有 React Component 都表现为 Shadow Widget 的构件，另外，构件可以由一个 React Component 组成，也可以由多个组成。我们可将 “构件” 理解成对 React Component 的简易封装，封装的目的是适应可视化管理的需要，比如，我们将多个构件串接成一个具有层次从属关系的 “W树”，然后提供若干遍历查找的 API。   
&nbsp;

2. **构件模板类**（Widget Template Class，WTC）   
&nbsp;   
WTC 是符合 Shadow Widget 自有规格的构件类定义，与 React Class 对等，但两者存在差异，WTC 可转为 React Class，转换后可在 JSX 中使用。   
&nbsp;   
在上一节，我们将前端开发划分为 “构件开发” 与 “界面开发”，其中 “构件开发” 的工作聚焦于封装一个个 WTC 类。   
&nbsp; 

3. <a name="w_tree"></a>**W 树**   
&nbsp;   
W 树是 Widget 树的简称，在 Shadow Widget 中所有构件都在生效时挂入到 W 树的，当一个构件不再有效，即，相应 Component 从 React 虚拟 DOM 中移除时，该构件也自动从 W 树移除。   
&nbsp;   
各个构件通过 key 属性指定它的名称，将从属各层的名称串接形成 **路径**，W 树根节点通常命名为 `body`，假如其下有一个名为 `toolbar` 的构件，那么，该构件的绝对路径可表达为 `".body.toolbar"`。Shadow Widget 提供特定 API，只要知道路径字串就能通过调用 API 获得任何构件，如果已获得一个构件，还可调用 API 以相对路径方式定位邻近构件。   
&nbsp;

4. <a name="dual_driven"></a>**双源驱动**（dual-source-driven）   
&nbsp;   
React 是数据驱动编程系统，各级 component 由传入的 props 决定它的行为模式，在运行中，又用 setState() 通过改变它的 state 属性来决定 component 如何表现。在 React 中，props 与 state 如何变化促使各节点表现不同功能，比如有一个 key 值为 "btn" 的 component，用 JSX 描述这个按钮：   
&nbsp;&nbsp;&nbsp;&nbsp;`var jsx = <button key="btn" name="noName" data-state={this.state.btnState}>Test</button> ;`   
**state 属性驱动** 就是用类似这样的语句触发：`comp.setState({btnState:"new_state"})`，
**props 属性驱动** 大致这样，在 `render()` 刷新时，将相应 `name` 属性值变一下：   
&nbsp;&nbsp;&nbsp;&nbsp;`var jsx = <button key="btn" name="foo" data-state={this.state.btnState}>Test</button> ;`   
该 JSX 输出对象的 `props.name` 值将从 `"noName"` 变为 `"foo"`，其 DOM 节点的 `name` 属性值自动随之变化。   
&nbsp;   
如果我们将上面两种驱动方式改造一下，少些函数式风格（因为它太过依赖编程），多些指令式风格（便于用属性更新来控制界面），变成双源驱动模式。   
&nbsp;&nbsp;第 1 步，将 `setState()` 改用 `comp.duals.btnState = "new_state"`  常规属性赋值来驱动程序运行。   
&nbsp;&nbsp;第 2 步，原先用 JSX 传递 `props` 也改成赋值，如：`comp.duals.name = "foo";`   
&nbsp;&nbsp;第 3 步，让 `duals.attr` 具备事件驱动的能力，`duals.attr` 变化可被侦听，还可串接多个 `duals.attr` 联动响应。   
&nbsp;   
双源驱动并未改变 React 原有的 `props` 与 `state` 的用法，只是新增了 `duals` 双源属性集合，将 `props` 下部分属性纳入 `duals`（纳入的属性也自动注册到 `state` 下），按 `duals.attr` 的方式使用后，原有 `props` 与 `state` 下相应属性仍然存在。   
&nbsp;

5. **可计算属性**（Derivable Property）   
&nbsp;   
可计算属性是 Shadow Widget 中能经过推导自动计算的属性，举个例子，如下定义一个按钮：   
&nbsp;&nbsp;&nbsp; `<button name="foo" $$for='' $data-name='duals.name + "_1"'>Test</button>`   
计算后 `data-name` 的值是 `"foo_1"`，它从 `name` 属性推导而来。所有可计算属性名都以 `'$'` 字符开头，其值是一个符合 javascript 语法的表达式字串，表达式中可引用现有 `duals` 变量，比如上面举例的 `duals.name`，凡被引用的变量，会自动与本表达式建立联动更新关系，当源头数据有变化，这个表达式会自动重新计算。   
&nbsp;   
可计算属性的值要求是脚本表达式，如本例的 `'duals.name + "_1"'`，Shadow Widget 为此类表达式准备了解释运行环境，有配套的解释器与运行栈支持。

&nbsp;
