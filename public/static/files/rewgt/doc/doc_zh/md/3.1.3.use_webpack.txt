3.1.3 使用webpack
----------------

&nbsp;

Shadow Widget 同时支持用 browserify 与 webpack 打包，上一节已介绍用 bowserify 的包的例子，本节将介绍如何用 webpack 打包。

#### 创建空白工程

先全局安装 webpack 版本，如果本机还没安装的话，运行如下命令：

``` bash
npm install webpack --global
```

从 Shadow Widget 官方克隆样板工程：

``` bash
git clone https://github.com/rewgt/sample_webpack.git
cd sample_webpack
npm install
```

该工程近似于上一节介绍 browserify 工程，为迎合 webpack 风格，文件目录稍作更改：

1. index.js 移到 src 目录下，源文件 index.html 也放这个目录
2. 输出 bundle.js 放在 dist 目录下

#### 打包、运行

在命令行运行 `webpack` 即启转译与打包，成功后，在 dist 目录输出 bundle.js 与 index.html 文件。然后在浏览器打开 `http://localhost:3000/sample_webpack/dist/`，看看是否正确显示 "Hello, world!" 信息。同样，您需事先启动 Shadow Widget 的本地 Web Service 服务，否则浏览器打不开上述页面。

由于 Shadow Widget 提供的 WebServer 并不支持 webpack 的 hot loader，如果想用 hot loader 特性，您须自行搭建 webpack-dev-server 服务环境。不过，hot loader 在 Shadow Widget 中用处不大，因为 Shadow Widget 的在线可视化开发环境，已经具备 “热更新” 特性，参见 [可视化设计使用手册](#5.)。

#### 选择 browserify 还是 webpack？

如果您的团队对这两者没有特别的倾向性喜好，建议选择 browserify，如果您从事的并非巨型产品，也建议用 browerify。webpack 的优点是功能强大，缺点是复杂、难用，有不少坑，如果可以不碰就尽量不碰。

&nbsp;
