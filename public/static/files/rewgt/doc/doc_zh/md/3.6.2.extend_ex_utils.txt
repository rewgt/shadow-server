3.6.2 扩展 ex 模块
----------------------

&nbsp;

#### 定制 utils 下特定的 API 函数

模块 utils 提供众多公共处理函数，用户可以替换已定义的 API，因为 Shadow Widget 尝试提供一个精简的内核，可能部分 API 功能不够强大，用户不妨自行定义一个替换原先的，比如下面 3 个 API：

```
utils.shouldUpdate()  // 提供 shouldComponentUpdate() 缺省处理
utils.marked()        // 将 markdown 文本转换成 html 代码
utils.pageCtrl()      // 场景页控制器
```

替换同名函数，须保证接口参数能兼容旧有定义，详情请参考：[API 手册](#4.)。

#### 扩展 ex 模块

模块 ex 专为 MJI 脚本运算提供 API 支持，在可计算表达式中，内置变量或函数只有少数几项（参见 [MJI 解释器](#1.7.)），我们可借助 ex 扩展可计算表达式的运算能力。

只有函数实体才允许注册到 ex 模块下，注册过程很简单，比如：

``` js
ex.regist('debugLog', function() {
  var iNum = arguments.length, s = 'DB>';
  for (var i=0; i < iNum; i++) s += ' ' + arguments[i];
  console.log(s);
});
```

之后就可以这么调用了：`ex.debugLog('name',23)`。

“ex 模块” 本质是类实例，所有用 `regist()` 挂入的函数都是类方法，ex 实例已缺省定义一个 `this.component` 成员，用来指示当前 callspace 所在的节点。

#### 获取 callspace 相关信息用于扩展 API

ex 中的类方法在可计算表达式中动态调用，有时我们希望得到当前哪个节点的哪个可计算属性在运算，`ex.evalInfo()` 正好能帮你提取相关信息。

调用 `ex.evalInfo()` 将返回 `[component, attrName, iTimeId]` 信息，其中 `attrName` 是当前正在运算的可计算属性，`component` 是当前可计算属性所在的节点，它与 `ex.component` 可能等同，也可能不同，因为当前 callspace 栈顶可能在当前可计算表达式的上层。`iTimeId` 指示当前可计算表达开始计算的时间。

比如，我们这么注册一个 API 用于查看当前表达式位置：

``` js
ex.regist('where', function() {
  var bInfo = this.evalInfo();
  if (bInfo) {
    var s1 = this.component.widget.getPath();
    var currComp = bInfo[0], s2 = currComp.widget.getPath();
    console.log('callspace:',s1,' attr:',bInfo[1],' path:',s2);
  }
});
```

获得当前可计算属性及它所在节点（如上例 `currComp`）信息后，我们可构造一种类似于 `ex.ajax()` 的异步处理机制。比如，当可计算表达式被触发时，远程请求特定数据，成功后，用 `currComp.duals.attr = value` 赋值语句驱动下一步动作。已有 API 如 `ex.ajax()` 与 `ex.jsonp()` 就是用此机制实现的。

说明：用户须自行管理因扩展 ex 模块带来的可能命名冲突，即，扩展 ex 模块属开发者私有行为。

&nbsp;
