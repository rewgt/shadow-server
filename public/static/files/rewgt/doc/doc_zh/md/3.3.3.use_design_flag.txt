3.3.3 使用 `__design__`
---------------------

&nbsp;

`W.__design__` 指示当前运行的程序是否处于 “可视化设计” 状态，编程时这么判断：

``` js
    if (W.__design__)
      console.log('in design state');
    else console.log('not in design state');
```

#### 可视化设计的特殊表现

在可视化设计界面，从右侧拖动一个构件模板到主设计界面，即可创建一个构件，在主设计界面点击某构件，可选中它，然后在 property 属性页在线修改该构件的各项属性，如果双击主设计界面中的构件，通常能弹出内容编辑窗口，让你能快速编辑相关构件的关键属性。

总之，开发中的软件在可视化设计界面中的表现，与真实运行大不一样，真实运行时，在界面点一个按钮，将触发构件的 onClick 事件，但在可视化界面不触发 onClick，改成选择被点击的构件。也就是说，我们在定义 WTC 类时，要区分界面设计与正式运行两种应用场景。

设计态下应专注于设计应用程序的界面，而非它的动作表现。**在设计态下，程序界面不挂载任何投影类定义**，构件单击与双击的含义变了（变成选择构件与编辑属性），对于特定构件，界面表现形式也变，比如 TablePanel，为方便设计态下选择全表或某一行，界面会多显示一个控制条。

用户在开发 WTC 类，也须注意识别 `W.__design__`，为 “可视化设计” 过程提供特殊支持，或者，为消除两种状态潜在的操作冲突，识别 `__design__` 不同状态后，相应的执行不同的处理。

#### 内控事件函数

在 Shadow Widget 中，常规事件函数以 `'$'` 作前缀，内控事件函数以 `'$$'` 作前缀，同一构件中，若同时定义这两种事件函数，系统将自动选内控事件函数。

举例来说：

``` js
class THighlightBtn_ extends T.Button_ {
  // ...

  $$onClick(event) {
    // do something ...
    if (this.$onClick) this.$onClick(event);
  }

  $onClick(event) {
    // ...
  }
}
```

在这段代码中，`$$onClick` 函数接管构件的点击操作，它在处理过程中，还能即时分析是否定义了 `this.$onClick`，若有定义，可接着调用 `$onClick` 函数。

内控事件函数只在 WTC 类中定义才有效，不能通过 props 属性传递进来用。常规事件函数可以用 props 传递（如 `props.$onClick`）。

我们将设计态与运行态纳入 WTC 设计，甚至有时还把调试态（`W.__debug__`）也纳入设计，编程将变得很复杂。内控事件函数提供了“上帝之手”，帮你玩转这一切，通常我们用内控事件函数管理所有运行状态，它被调用时识别 `W.__design__` 与 `W.__debug__` 取值，然后针对不同情况，作出不同处理。

&nbsp;
