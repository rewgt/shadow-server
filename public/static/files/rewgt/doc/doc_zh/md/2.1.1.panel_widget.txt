2.1.1 面板构件
-------------------

&nbsp;

#### 四种基础 Panel 类构件

基础 Panel 类构件包括：

1. `BodyPanel`   
专用于表达 W 树的根节点。该根节点是 W 树首个实节点，位于最根部，类似于 HTML 文档的 `document.body` 节点，它因此被称为 W 树的 body 节点。作为根节点它有一些特殊要求，其下节点要么是 “面板类” 构件，用 flex 或 table 布局，要么是其它非行内构件，固定以绝对位置方式来布局。另外，`BodyPanel` 用 `duals.innerSize` 记录窗口尺寸，侦听它可识别当前网页是否在缩放。

2. `Panel`   
提供横向或纵向 flex 布局方式，支持面板层层嵌套。

3. `GridPanel`   
按 flex 方式布局，但依序限定各子节点宽度，当众多子节点以确定宽度排成 N 列时，`GridPanel` 表现为网格形态。

4. `TablePanel`   
按 table 方式布局，各单元格既可放置 Panel 类构件，使子层 Panel 布局往下延续，也可放置 Div 或 P 类构件。

以上 4 种是基本类，其它 Panel 类构件需从这 4 者继承。

#### 面板布局与流式布局

Shadow Widget 所有内置构件中，只有 Panel 类构件支持 flex 布局，直接的 flex  布局或由 `TablePanel` 简单套表格，单元格子项仍是 Panel 的布局方式，我们统称为 “面板布局”，也就是，由 `Panel, GridPanel, TablePanel` 单层或多层嵌套形成布局形态。这种形态与 HTML 文档缺省采用 “流式布局” 有很大不同。

流式布局按顺序摆放部件，后面部件不对前面部件的定位产生影响。面板布局则**区分行列，同一行各部件的位置相互影响**。

在实践中，面板布局常服务于大功能块设计，比如：左边栏放什么，右边栏放什么，顶部是否有工具栏，底部是否放状态栏。**先完成面板布局，然后分头实施各功能块 UI 细节**，布局设计与细节设计通常有截然区分，改换到细节设计，界面如何摆放也将切换到缺省的流式布局。

其次，面板布局对子项如何摆放是自适应的，父构件宽高变化后，触发 `resizing` 事件，各层面板构件响应此事件，让它的内容布局自适应调整。

#### 面板布局的特点

Panel 构件的 flex 布局，采用 `flex-direction`、`flex-wrap` 等一系列 CSS3 规格实现布局。面板控件分两类，一类是子节点横向布局（如下左图），另一类是子节点纵向布局（如下右图），前者要求 `klass` 用 `row-reverse` （从左向右排列）或 `reverse-row`（从右向左排列），后者要求 `klass` 用 `col-reverse`（从上向下排列） 或 `reverse-col`（从下向上排列）。当这 4 者均未由 `klass` 指定时，面板缺省按 `row-reverse` 方式布局。

![横向与纵向布局](md/res/row_col_panel.png)

当需横向与纵向有多层布局时，叠加数层 Panel 即可，至于各层选横向的 Panel，还是纵向的，视其子成员需要横向排列，还是纵向排列来决定。

Panel 另一个常用 `klass` 是 `default-wrap_reverse-nowrap`，该值指示 “自动换行”，对应 CSS 定义：`"flex-wrap: wrap"`，如果取值为 `nowrap-default-wrap_reverse` 则表示不换行，对应：`"flex-wrap: nowrap"` 。

<a name='pos_indicator'></a>面板布局采用 **“简便标记法”** 指示距离，在 `margin, padding, borderWidth, left, top, width, height` 以及 `minWidth, maxWidth, minHeight, maxHeight` 属性中使用，规定如下：

1. 取值为 `null`，表示不额外定义，改由该构件相关 class 对应的 CSS 定义来决定。
2. 取值 `0 ~ 0.9999`，大于等于 0 且小于 0.9999，表示百分比，比如 `0.5` 表示 `50%`
3. 取值  `0.9999 ~ 1`，大于等于 0.9999 且小于 1，表示 `100%`
4. 取值大于等于 `1`，表示像素值，比如，100 表示 '100px'
5. 取值小于 0，有两种应用，一是用在 `width, height`，表示剩余宽高，将转为百分比，如 '-0.5' 表示占用剩余宽（或高）的 50%，-1 表示占剩余量的 100%，-2 表示占剩余量的 200% 。二是用在 `margin, left, top`，表示负值距离，`0 ~ -0.9999` 是负百分比，小于等于 `-1` 表示负值像素。

“剩余宽高” 是指当前构件在父构件总宽（或总高）刨去本级各构件已指定的宽度（或高度）之后，得到的剩余宽度（或高度）。用负值宽高指示剩余宽高，对快速布局很有帮助，比如横向布局的 3 块面板，第一块占 `100px`，想让第二块与第三块各占剩下的 `40%` 与 `60%`，后两块面板分别指定 `-0.4` 与 `-0.6` 即可。

注意：
1. 剩余宽高有方向限制，横向布局时，只能指示剩余宽度，不能指示剩余高度，而纵向布局时，只能指示剩余高度。
2. 剩余宽高还须父节点宽高可推算时才生效，如果父节点宽高值为 `null`，其子层的剩余宽高特性将被忽略。

对于边宽与间距（指 `margin, padding, borderWidth` 属性），除了上述列举的取值，还可以用一个 array 数组分别指定上、右、下、左共 4 个方位的取值，比如 `[0,1,2,3]` 对应 css 值为 `"0 1px 2px 3px"`。

对于嵌套使用的面板，系统将逐层推算各面板的位置信息，以百分比标记的值，换算成具体像素值，负值指示的剩余宽高，也转成具体像素值，渲染输出的面板宽高、间距等都由像素值指示。

&nbsp;
