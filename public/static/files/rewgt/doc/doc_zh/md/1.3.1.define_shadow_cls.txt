1.3.1 投影定义
-----------

&nbsp;

#### <a name="prepare_env"></a>准备 JS 编码工作环境

在 [“1.1.4 简单示例”](#1.1.4.) 一节我们介绍过一个用转义标签定义用户界面的例子（样例 demo1），现在我们在此基础上添加一段 `<script>` 定义，来编写 javascript 代码。

在 html 文件的转义标签定义块之后，添加如下代码（源码请参考 `demo2/index.html`）：

``` html
01 <script>
02 if (!window.W) { window.W = new Array(); W.$modules = [];}
03 W.$modules.push( function(require,module,exports) {
04 
05 // write your code here ...
06 
07 });
08 </script>
```

这是一个通用的代码框架，对于 GUI 开发人员（注：不是 WTC 封装人员），凡遇到他想编写一点 JS 代码时，都先建立上述代码框架，在上面 `"// write your code here ..."` 位置着手编写他自己的代码。

这种代码框架，既可以内嵌于 `*.html` 网页文件，也可以独立写在 `*.js` 文件中，然后用 `<script>` 标签将 js 文件导入网页。这两种方式完全等效，为清晰起见，不妨把它们统称为 **“MAIN 模块”**。

然后，我们在 “MAIN 模块”导入必要的全局变量：

``` html
01 <script>
02 if (!window.W) { window.W = new Array(); W.$modules = [];}
03 W.$modules.push( function(require,module,exports) {
04 
05 // write your code here ...
~~ var React = require('react');
~~ var ReactDOM = require('react-dom');
~~ 
~~ var W = require('shadow-widget');
~~ var main = W.$main, utils = W.$utils, ex = W.$ex, T = W.$templates;
11 
12 });
13 </script>
```

将 `shadow-widget` 库模块 require 进来后命名为 `W` 变量，这是本系统的根入口，此 `W` 变量既用来操作 W 树，也附带几个常用子模块，如 `$main`，`$utils`，`$ex`，`$templates` 等，其中 `$utils` 提供常用的公共函数，`$templates` 记录全部内置的 WTC 定义，转义标签中用 `$=WTC` 指示的对象，都上这个子模块查得。

上面是样板代码，后面举例经常用到，为简单起见，这段代码今后不重复给出。手册若提及 “在 MAIN 模块编写代码” 指的就是上述基线代码。

#### 一个简单例子：定义事件函数

用转义标签定义界面：

``` html
  <div $=P key='p'><span $=Button key='btn'>Click me</span></div>
```

在 “MAIN 模块” 编写代码：

``` js
~~ main['.body.top.p.btn'] = {
02   $onClick: function(event) {
03     alert('clicked!');
04   },
05 };
```

之后用浏览器打开 “`localhost:3000/demo2/`”，您将看到网页中会有一个标为 "Click me" 的按钮，点击此按钮将显示 "clicked" 的弹窗。

我们在 `main['.body.top.p.btn']` 注册一个投影类，界面那个按钮在 W 树中处在 `'.body.top.p.btn'` 位置，被测系统启动后，能为按钮与预设的投影类自动建立关联，关联依据便是构件的绝对路径。

说明：
1. 只有当路径各段都是手工指定 key 值命名的，系统才会自动关联，反之，如果没指定 key 值，系统自动给 key 赋一个 `0, 1, 2` 等在本级不重复的整数值，这种情况下就不会自动关联。
2. 投影类中的事件函数，都要加一个 `'$'` 前缀字符，如本例的 `$onClick`。函数格式与 react 的要求相同，所有 react 支持 DOM 事件函数都被支持，<a target="_blank" href="https://facebook.github.io/react/docs/events.html">请参考 react 文档</a>。
3. 创建构件时还可通过 props 传入事件函数，比如传入 `props.$onClick`，如入的函数将覆盖在本投影类定义的同名事件函数。

#### 投影式继承的规则

投影式继承借助 React 的 [`create-react-class`](https://facebook.github.io/react/docs/react-without-es6.html) 实现功能，所以，投影类的定义格式，首先要符合 React 的规格要求，然后叠加 Shadow Widget 若干规定。

除上面介绍的事件函数 `'$'` 前缀外，附加规定还有：

1. 投影定义的函数，将叠加到相应 WTC 类（在转义标签中已用 `$=WTC` 指示）起作用。   
相当于投影类是继承类，WTC 类是基类，只是继承重用的方式稍有变化。

2. 投影类中，若有函数（非 `'_'` 前缀）与 WTC 类方法重名，原方法将被改名，自动添加 `'_'` 前缀，调用原方法也稍有变化。   
比如：`getInitialState()` 被改造成 `_getInitialState(component)` ，总会添加一个 `component` 首参数，要这么调用：`this._getInitialState(this)`。

3. 因为有上述 `'_'` 前缀的改造，用此前缀的函数命名被保留，您不应在投影类中，定义 `'_'` 作前缀的函数。

4. 所有 WTC 类都定义了 `getInitialState, componentDidMount, componentWillUnmount` 这 3 个类方法，投影类中若想重载它，可定义同名函数，并用类似 `this._getInitialState(this)` 的语句调回基类函数。

5. 禁止在投影类中定义 `render, shouldComponentUpdate, componentWillReceiveProps` 这 3 个函数。如果不慎覆盖了这 3 者基类方法，Shadow Widget 的单向数据流机制将被破坏。

6. 若想重定义 `getDefaultProps` 函数，可调用基类 WTC 实例的 `getDefaultProps()` 函数，来获得缺省 `props` 值。

我们在前面 demo2 基础上增加一点代码，演示这些附加规定，见样例 demo3。

``` js
01 var btnComp = null;
02 var btnNode = null;
03 
04 main['.body.top.p.btn'] = {
05   getDefaultProps: function() {
~~     var props = T.Button.getDefaultProps();
07     props.title = 'just for test';
08     return props;
09   },
10   
11   getInitialState: function() {
~~     var state = this._getInitialState(this);
13     btnComp = this;
14     return state;
15   },
16   
17   componentDidMount: function() {
~~     this._componentDidMount(this);
19     btnNode = this.getHtmlNode(); // same to ReactDOM.findDOMNode(this)
20   },
21   
22   componentWillUnmount: function() {
23     btnNode = null;
24     btnComp = null;
~~     this._componentWillUnmount(this);
26   },
27   
28   $onClick: function(event) {
29     alert(btnNode.nodeName + ': ' + this.widget.getPath());
30   },
31 };
```

#### 重复使用投影类

如果想重用一个投影类，比如一个有两个按钮，要使用相同的投影定义，不妨按如下方式编码：

``` js
01 var btnClass = {
02   $onClick: function(event) {
03     alert('clicked!');
04   },
05 };
06 
~~ main['.body.top.p.btn'] = main['.body.top.p.btn2'] = btnClass;
```

或者，自行定义 React Class：

``` js
08 
~~ var BtnClass = T.Button._createClass(btnClass);
10 var btn = React.createElement(BtnClass,{title:'demo'}); 
11 // var btn = <BtnClass title='demo'/> ;   // ES6 style
```

所有 WTC 类都支持 `_createClass(defs)` 调用，该函数的功能与 React 的 `create-react-class` 等效。

#### <a name="super_static">超静态函数

上面介绍的 `T.Button._createClass` 是 “超静态函数”。

WTC 类下以 `'_'` 作前缀的符号被系统保留，既因为投影类重载基类同名函数，通过加前缀 `'_'` 来缓存基类方法，也因为 WTC 把预定义的，带此前缀的函数，视为 **超静态函数**。

WTC 实例与 React Class 实例处在不同位置，WTC 实例（如 `T.Button`）经 `_createClass()` 调用才得到 React Class，React Class 实例化（即 React Element 被渲染输出）后就是 React Component。可以这么理解：React Class 是 Component 的 Class，而 WTC 实例是 React Class 的 Class。

Shadow Widget 中的所有构件（构件的概念请参考 [“1.1.2 几个概念”](#1.1.2.)），都是 Component，在 Component 中用 `'_'` 属性取回 WTC 实例，若进一步取超静态函数，代码要这么写：`comp._._createClass(defs)`。

除了 `_createClass`，以后我们还会介绍其它超静态函数，它们多数用于调测或支持可视化编程。之所以起名叫 “超静态函数”，是因为在 Component 层级它用作静态函数，而在 WTC 层级它是普通类方法，以常规方式重载基类同名函数。

&nbsp;
