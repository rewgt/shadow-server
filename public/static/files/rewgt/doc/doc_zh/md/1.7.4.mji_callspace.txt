1.7.4 栈式运行环境
------------------

&nbsp;

Shadow Widget 的可计算表达式是一段 javascript 脚本，它由一种微型解释器（即 Mini Javascript Interpreter，简称 MJI 解释器）解释执行。被执行的脚本符合 javascript 规则，但语法范围比 javascript 小得多。

#### MJI解释器

Shadow Widget 内置 MJI 解释器，它在表达式级别，而非语句级别支持脚本解析。

该解释器的词法规则如下：

1. MJI 不支持在脚本中内嵌注释代码
2. 支持任意类型的 javascript 数据用于脚本计算，但直接可描述的（即字面量，Literal Notation）只支持这几种：数值（number）、字串（string）、数组（Array）、对象（object）、布尔量（boolean）。
3. 只内置一个关键字：`while`
4. 可描述的常量值有：`true, false, null, undefined, NaN`，它们含义与 javasript 相同。

MJI 解释器支持大部分 javascript 的表达式，但不支持语句形态的语法，比如赋值语句、循环语句。它所支持的表达式形态有：

1. 由二元操作符连接，如：`a + b`，`a.b` 等
2. 由三元操作连接，仅问号表达式一种，如：`cond? a: b`
3. 取小标成员，如：`a[b]`
4. 函数调用，如：`aFunc(arg)`
5. 逗号表达式，如：`3 + 4, a.b`

所有操作符的优先级与 javascript 一样，涉及的二元操作符如下：

```
    *     /     %     +     -     <<    >>    >>>
    <     <=    >     >=    in    ==    !=    ===   !==
    &     ^     |     &&    ||
```

除上面列明的规格，其它语法 MJI 解释器不支持，为方便大家理解，现扼要列举不支持的规格（不全）：
1. 不支持变量声明，不支持函数定义
2. 没有 new delete 关键字，也不支持 instanceof 判断
3. 不支持一元操作符，如 `++`、`--` 等不支持
4. 不支持语句级别的语法，如：赋值、控制语句（如 return、break、continue、if、else 等）

#### 附加规则

与语法相关，MJI 与 javascript 实现不尽一致的规则有：

1. 赋值   
MJI 不直接支持赋值语句，但可以用经封装的 `ex.setVar(sName,value)` 调用代替。比如：`ex.setVar("abc",3)` 等效于 `abc = 3`，setVar 调用的返回值是第二个参数 value 传入的值。

2. 循环   
MJI 也用 `while(cond,expr,expr2, ...)` 函数调用形式表达循环语句，函数参数变长，首参数 cond 要求是条件表达式，如果条件式计算结果为真（true），其后各个表达式才被计算，而且，只要条件判断成立，循环语式将持续运行，条件判断不成立才退出循环。

3. `typeof(aVar)` 要求参数 aVar 已存在，而 javascript 的 `typeof` 可以作用于未定义的符号。

4. 使用这几项变量 `props, duals, props, item, count, index` 时，自动转化成函数调用的形式。   
比如调用 `props.attr` 自动转化为 `props(0).attr`，`index` 转化为 `index(0)`，转化后固定带一个值为 0 的参数，0 表示在 0 层（即当前层）调用空间下查找。

#### 调用空间 callspace

调用空间是 MJI 脚本解释器动态执行所需的域名空间（namespace），读取的变量或函数，都要到调用空间下查找。

调用空间是一层压一层的栈式结构，当前层为 0 层，上一层是 -1 层，再向上是 -2 层。每一层调用空间都绑捆到某个构件节点，凡使用了 `$for` 指令或 `$` 引用的节点，都新生成一个调用空间，且捆绑到当前节点，靠得最近那个空间是 0 层 callspace。

用 `$for` 开启调用空间在前文已有举例，现再举一个用 `'$'` 引用开启调用空间的例子（见样例 demo11）：

``` html
01 <div $=Panel key='top' height='{null}'>
02   <div $=Div key='hello' $for='' dual-data='{{"name":"Wayne","lastName":"Chan"}}'>
03     <div $=P key='p' width='{0.9999}'>
04       <span $=Input key='name' $value='duals.data.name + " " + duals.data.lastName'></span>
05       <span $=Br></span>
06       <span $=Span key='txt' $html='"Hello, " + duals.data.name'></span>
07     </div>
08   </div>
~~   <div $='//hello.p' dual-data='{{"name":"George","lastName":"lee"}}'></div>
10 </div>
```

本例中，`$='//hello.p'` 指示在当前位置引用 `'//hello.p'` 节点，引用过程是节点复制的过程。

&nbsp;

每个调用空间都缺省定义如下符号：

1. `ex` 模块   
在可计算表达式中常用的 API，都挂在 ex 下，如 `ex.log, ex.tagValue, ex.time, ex.elementOf` 等。

2. `Math` 模块   
Javascript 的 Math 模块已预置，诸如 `Math.max, Math.floor, Math.random` 等函数可供调用。

3. `props, duals, props, item, count, index` 函数   
其中前 3 项支持用 0, -1, -2 等参数指定取哪一层的节点，或用 `sPath` 参数取指定节点，`sPath` 若用相对路径，自动以当前层所在的节点为参照。比如：`state("./toolbar").attr` 含义是：找到以 0 层节点为参照，路径为 `"./toolbar"` 的目标节点（`targ`），然后读取 `targ.state.attr` 的值。   
关于 `item, count, index` 的用法，请参考下一节 [循环指令](#1.7.5.) 。

4. `typeof` 函数

运行中，如果可计算表达式使用 `ex.setVar()` 登记一个新变量，会保存到当前调用空间（即 0 层空间）。

#### 用 `componentOf()` 定位某层 callspace 所在节点

在 ["节点查找"](#1.5.4.) 一节，我们已介绍如何用 `comp.componentOf(sPath)` 定位一个节点，当函数参数 `sPath` 不是路径字串，而是 `0, -1, -2` 等数值时，这个函数将用于查找指定某层 callspace 所在的节点。

#### 动态节点

如下可计算属性用来控制动态节点生成：

```
    $for    $if    $elif    $else
```

所谓动态节点，是指运行中根据特定条件，动态决定它是否存在的节点，这里所提的 “特定条件” 也是脚本表达式，由 MJI 解释器动态计算。

上述 4 个特殊的可计算属性，称为 “指令可计算属性”（Directive Evaluatable Property），相应的，其它可计算属性称为 “非指令可计算属性”。

指令可计算属性的字串表达式，简称为 “指令表达式”。指令表达式用来描述动态节点，在接下来两节 [循环指令](#1.7.5.) 与 [条件指令](#1.7.6.) 详细介绍。

&nbsp;
