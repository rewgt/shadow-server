1.1.3 实现原理
-----------------

&nbsp;

#### 借助 HTML 标签描述用户界面

为兼顾性能与易读、易维护特性，Shadow Widget 不使用 JSX 描述方式，改用原生 HTML Tag 的方式，使用 `div` 与 `span` 这两种 Tag，描述界面定义，比如：   
&nbsp;&nbsp;&nbsp; `<div $=P><span $=Span>Hello, world!</span></div>`   
这里，`div` 标签表达非行内元素，`span` 则表达行内元素，`$` 用来指示转义后的 Tag 名，上面代码将被转换成如下 JSX 格式：   
&nbsp;&nbsp;&nbsp; `<P><Span>Hello, world!</Span></P>`   
这里 `P` 与 `Span` 都是 Shadow Widget 内置支持的构件类，其语义分别等效于原生的 `p` 与 `span` 标签，Shadow Widget 已内置描述了大部分 html 标签，均采用首字母大写，剩下字母小写的命名方式。相比原生 Tag，仅将首字母改成大写，比如 `input` 在 Shadow Widget 对应的构件名为 `Input`，`textarea` 对应的是 `Textarea`。

借助 Tag 转义，用 `span` 表达任何行内标签（inline tag），用 `div` 可表达任何非行内标签，两者合一起即表达全部标签。

经上述转义后，我们可以直接把这种语句写在 `*.html` 文件中了，比如在 html 的 `<body>` 标签下编写如下代码：

``` html
  <div $=Panel height='{60}'>
    <div $=P><span $=Span>Hello, world!</span></div>
  </div>
```

这里 `Panel` 是 Shadow Widget 提供的面板控件，其属性 `height` 是花括号括起来的字串，首与尾花括号表示它是 JSON 数据，系统自动调用 `JSON.parse()` 分析其内容，比如这个 `height` 属性值为 `60`，是 number 而非 string 类型。

上述借助 HTML 标签描述界面的技术，叫做 **“转义标签”** （Escape Tag）。

#### 用 ES5 做前端上层开发

如前文 [两大设计目标](#1.1.) 中介绍，前端开发者分两类：WTC 封装者、使用现成 WTC 的 GUI 开发者，对于后者，因为不必定义底层 WTC 类，他不必学习 ES6、ES7 语法，不必接触 babel 等翻译工具，也不必使用 browserify、webpack 等打包工具，他只需熟悉符合 ES5 标准的 javascipt 即可。只有 WTC 封装者，才必须接触 ES6 及相关配套工具。

当然，全部开发都采用 ES6 规范也是可以的，只是我们不推荐这么做，因为除 WTC 之外的开发，应保证实习生也能胜任，若将前端的上层开发也弄得无比复杂、工具链超长，显然不够明智。

Shadow Widget 要求 WTC 封装者采用 ES6 的 class 定义各种构件，下面扼要介绍它的实现原理，无关代码我们先注释掉。

``` js
01 // define TMyButton_ with ES6
02 //---------------------------
~~ class TMyButton_ extends T.Button_ {
04   constructor(name,desc) {
05     super(name || 'MyButton',desc);
06   }
07   
08   getDefaultProps() {
09     var props = super.getDefaultProps();
10     // props.attr = value;
11     return props;
12   }
13   
14   getInitialState() {
15     var state = super.getInitialState();
16     // ...
17     return state;
18   }
19   
20   $onClick: function(event) {
21     alert('clicked');
22   }
23 }
```

上面代码应由 WTC 封装者去开发，目标是封装出一个按钮 WTC 类，即 `TMyButton_`，从 Shadow Widget 已内置的 WTC 类（即 `T.Button_`）开始继承。

GUI 开发者拿到这个 `TMyButton_` 类定义后，按如下方式创建 React Component，我们假定他用 ES5 编码：

``` js
01 // Using TMyButton_ with ES5
02 //--------------------------
03 
~~ var AbstractButton = new MyButton_();
05 
06 // convert to React Class
~~ var MyButton = AbstractButton._createClass({});
08 
~~ var MyButton2 = AbstractButton._createClass( {
10   $onClick: function(event) {
11     alert('another onClick');
12   }
13 });
```

须用 WTC 类创建一个实例（如上面 `AbstractButton`），再调用该实例的 `_createClass()` 才创建 React Class（如上面 `MyButton` 与 `MyButton2`），这个过程比原生 React 用 `class MyButton extends React.Component {}` 直接获得 React Class 要复杂，但换回更灵活可定制性，以及界面表现与行为定义的分离能力。

这里 `MyButton` 与 `MyButton2` 可在 JSX 直接使用，比如：

``` js
01 // coding in ES6
02 var jsx = ( <p>
03   <MyButton>test</MyButton>
04   <MyButton2>test2</MyButton2>
05 </p> );
```

隔离上层 GUI 开发与底层 WTC 封装的关键是，调用  `_createClass(defs)` 创建  React Class，传入不同的 `defs` 参数，得到不同的 React Class，传递的 `defs` 要求用 ES5 语法书写，这让构件的行为定义同时适应上、下层编程，因为 ES6 对 ES5 语法是兼容的。作为初学者，您先不必关心 `_createClass()` 如何实现，只需清楚这是分界点，知道它与 `React.createClass()` 是等效的。

#### 投影式声明（Shadow Declaration）

实际开发中，我们并不需要像上面那样显式调用 `_createClass(defs)`，而是按固定规则将 `defs` 定义注册到某处，然后系统初始化时，自动导入这个定义（即隐式自动调用 `_createClass(defs)`）。比如下面描述一个按钮的用户界面：

``` html 
  <span $=Button key='btn'>Click me</span>
```

假定这个按钮构件的路径是 `".body.toolbar.btn"`，然后我们用 javascript 定义它的行为：

``` js
~~   main['.body.toolbar.btn'] = {
    getInitialState: function() {
      return this._getInitialState();
    },
    
    $onClick: function(event) {
      console.log('clicked');
    },
  };
```

在 `main['.body.toolbar.btn']` 定义的东西就是调用 `_createClass(defs)` 所需的 `defs` 参数，为区别起见，我们把这种定义方式称为 **投影式声明**（Shadow Declaration），其定义体（即 `defs` 取值）称为 **投影定义**。

投影定义的详细格式以后介绍，请大家先理解它具备如下 3 个特点：

其一，它在 WTC 正规 class 继承之上，以便利的方式再提供一种定制，虽不是严格的类继承，但它所支持的能力，与类继承等效。在这个意义上，投影定义也常简称为 **投影类**。

其二，若以投影类为主 “定制” 构件的行为，使编程不再受 ES6 语法、babel 翻译工具、browserify 或 webpack 打包工具等因素困扰。

其三，投影式声明的机制，让 GUI 界面描述与各构件的行为定义得到分离。前者在 `*.html` 文件中用转义标签书写，后者在 JS 文件中编程。

由于采用投影式声明机制，我们的技术体系也因此命名为 Shadow Widget。

#### 双源驱动

如上一节介绍，双源驱动取 props 下部分属性，构造事件化驱动的机制，它采用 `Object.defineProperty()` 接口定义 setter 与 getter 回调来实现，即，对 `comp.duals.attr` 取值时，相应的 getter 函数自动被调用，对它赋值时，setter 函数被调用。getter 很简单，直接返回 comp.state.attr 值，setter 比较复杂，要判断赋值是否立即执行，还是延后到下个周期再执行，延后执行是为了保证数据单向流动，此外，成功赋值后，还要自动触发已侦听本属性的所有事件函数。

&nbsp;

**特别说明**：对于初学者，可能无法完整理解本节与上一节（[几个概念](#1.1.2.)）的内容，不要紧，完全理解这两节内容需对 react 有深入了解，对 Shadow Widget 也有基础认识。大家不妨先理解个大概，按顺序继续学习本手册，待深入后，再回头重读这两节的内容。

&nbsp;
