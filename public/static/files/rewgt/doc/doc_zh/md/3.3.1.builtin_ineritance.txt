3.3.1 内置构件的继承关系
----------------------

&nbsp;

#### 内置 WTC 继承图

Shadow Widget 内置构件分为 Panel 类、Div 类、P 类、Span 类共 4 种，参见基础篇 [“内置构件列表”](#2.1.5.) 。

这些 WTC 类定义的继承关系如下图所示：

```
    Widget
    +-- BodyPanel
    +-- Panel
    |   +-- GridPanel
    |   +-- TablePanel
    |   +-- GroundPanel
    |   +-- TempPanel
    |   +-- NavPanel
    |   |   +-- NavDiv
    |   +-- ScenePage
    +-- Unit
    |   +-- Div
    |   |   +-- Div2
    |   |   |   +-- VirtualDiv
    |   |   |   |   +-- Col/Colgroup/Td/Tbody/Thead/Tfoot/Th/Tr
    |   |   +-- HiddenDiv
    |   |   +-- Article/Section/Header/Footer/Aside/Nav/Main
    |   |   +-- MarkedDiv
    |   |   |   +-- MarkedTable
    |   |   +-- OptDiv
    |   +-- SplitDiv
    |   +-- GroundDiv
    |   +-- TempDiv
    |   +-- RefDiv
    |   +-- TableRow
    |   +-- P
    |   |   +-- Noscript/Fieldset/Details/Ul/Ol/Li/Dl/Dd/Dt/Figure/Figcaption/
    |   |       Menu/Menuitem/Address/Form/Iframe/Blockquote/Table/Caption/
    |   |       Hgroup/H1/H2/H3/H4/H5/H6/Hr/Pre
    |   |   +-- OptLi
    +-- Span
    |   +-- HiddenSpan
    |   +-- VirtualSpan
    |   +-- Br/A/Q/Abbr/Audio/Source/Track/Bdi/Bdo/Data/Mark/Wbr/Button/
    |       Textarea/Progress/Img/Video/Canvas/Picture/Map/Area/Time/
    |       Output/Input/Keygen/Label/Legend/Sub/Sup/Select/Datalist/Optgroup/
    |       Option/B/I/S/U/Ins/Del/Code/Var/Summary/Em/Strong/Big/Small/
    |       Dfn/Samp/Kdb/Cite/Dialog/Meter/Embed/Object/Param/Ruby/Rp/Rt
    |   +-- OptSpan
    |   |   +-- OptA/OptImg/OptButton/OptInput/OptOption
    |   +-- TempSpan
    |   +-- RefSpan
```

`Widget` 是所有 WTC 的基类，视作抽像类，除了它不在转义标签中使用外，其它均可用在转义标签中。我们新定义一个 WTC，经常从上图选一个最近似的内置构件作为基类，继承旧特性，再扩展若干新特性。

#### 几种获得 React Class 的途径

在 React 体系下，定义用户界面先要有 React Class，得到 React Class 有下面几种途径：

1. 从现有 WTC（如前面列出）继承，新定义一个 WTC   
如何继承实现，请参考 [“WTC 类定义”](#1.3.2.)，假定 WTC 为 `HighlightBtn_`，获得 React Class 过程如下：   
&nbsp; `var HighlightBtn__ = new HighlightBtn_();`   
&nbsp; `var BtnCls = HighlightBtn__._createClass();`

2. 将现有 WTC 与在 `main[sPath]` 定义的投影类捆绑   
转义标签已标识构件的 WTC 与路径 `sPath`，系统在初始导入时自动捆绑投影定义，生成 React Class。

3. 调用 `_createClass` 让现有 WTC 捆绑指定投影类   
如：`var BtnCls = T.Button._createClass(defs);`

其中，第 3 种可视为第 1 种的特例，不传 `defs` 参数调用 `_createClass` 表示只用 WTC 原始定义，不必经投影类 `defs` 定制。

第 2 种途径必须借助 `main` 与 `T` 模块， 分别从中查找投影定义与 WTC 实例，这意味着这两类全局资源有命名要被占用。许多时候，尤其提供中间件 lib 库时，我们不希望 `T` 命名空间被污染，应改用第 1 种或第 2 种方式得到 React Class。

&nbsp;
