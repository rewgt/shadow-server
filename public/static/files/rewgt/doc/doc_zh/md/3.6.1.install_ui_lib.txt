3.6.1 安装库化 UI
-----------------

&nbsp;

#### 安装库化 UI 的步骤

库化 UI 就是以模板方式定义界面模块，使用时用 `'$=path'` 转义标签引用，或取模板中某个 element 以编程方式动态安装节点。

库化 UI 以厂商分类，比如厂商 rewgt 共享的节点注册在 `".rewgt"` 路径下。安装库化 UI 的第一步是设置指定厂商的根节点，根节点是 `TempPanel` 面板，通过调用 `utils.setVendorLib(sName,callback)` 来设置。

我们用例子来说明，参见 demo42，假定我们要设计一种按钮，移鼠标在其上时按钮高亮显示，移走鼠标恢复正常。

``` js
var sampleEle = null;

function registMyLib(callback) {
  if (!sampleEle) {
    var jsonX = [ ['P',{key:'sample'}],
      ['Button', {
        key:'hoverBtn',
        $onMouseOver: function(event) {
          this.duals.style = {opacity:'0.5'};
        },
        $onMouseOut: function(event) {
          this.duals.style = {opacity:''};
        },
      }],
    ];
    sampleEle = utils.loadElement(jsonX);
  }
  
  utils.setVendorLib('ui', function(template) {
    template.setChild(sampleEle,callback);
  });
}
```

函数 `utils.setVendorLib(sName,callback)` 中的 `sName` 指定厂商名（camelCased 风格），这里我们用 `"ui"`，`callback` 回调带一个 `template` 参数，`template` 是厂商库的根节点，也就是 TempPanel 根模板节点，接下来用 `template.setChild(libEle,callback)` 在根模板节点下，登记一个 key 为 `"sample"` 的段落 P 节点，段落中再定义 `hoverBtn` 样板按钮。

上面用 json-x 描述被安装的 P 节点，用户可根据实际情况改用 JSX 描述。

然后，挂入上面 `registMyLib` 函数：

``` js
main.$$onLoad.push( function(callback) {
  registMyLib(callback);
});
```

初始化函数被 `push` 到 `main.$$onLoad` 函数列表中，注意，`main.$$onLoad` 列表与 `main.$onLoad` 列表用法有差别：

1. 前者（`$$onLoad`）各函数依次先被执行，执行完毕后才执行后者（`$onLoad`）中各个初始化函数。

2. 存放在 `$$onLoad` 中的各个函数，都要求用参数 `callback` 传递回调函数，而后者的初始化函数不要求带 `callback` 参数。   
说明：系统借助 `$$onLoad` 中各函数的 `callback` 参数，强制各函数以串行方式运行，所以，压入 `main.$$onLoad` 的初始化函数，必须调用传入的 `callback` 参数，否则，其后的初始化调用将意外终止。

3. 即使在设计态下（`W.__design__` 为真），前者各初始化函数也依次被执行，但后者 `$onLoad` 在设计态下却自动忽略。

最后，在界面以绝对路径方式引用库构件：

``` html
    <span $='.ui.sample.hoverBtn'>Test1</span>
```

#### 在库化 UI 导入后在转义标签引用它

如前面例子，在转义标签中以 `$` 引用模板库，系统在导入界面定义后，先依次运行在 `main.$$onLoad` 列出的初始化函数，然后依次关联初始界面在转义标签中的 `$` 节点引用，最后才执行在 `main.$onLoad` 定义的初始化函数。

因为这个执行顺序，只要库化 UI 正常被安装，转义标签即可任意以 `"$=path"` 方式引用。第 3 方软件通常按此方式开放界面库供他人使用，步骤如下：

1. 在一个 javascript 库文件定义库化 UI，使用时要求用户在网页文件中用 `<script>` 标签把该 JS 库包含进来。

2. 第 3 方软件商开放一个资源模板页，将模板页中的元件拖入到我们的可视化设计界面，即创建相应构件。新创建的构件以 `$` 引用指向库化 UI 中的某个节点。

3. 在可视化设计器中，修改新创构件的相关属性值，以此配制各种显示效果。

当然，许多软件商都想挂载库化 UI，为避免重名，挂入点的构件命名须遵守本技术体系的约定，参见 [“库化 UI 的命名”](#3.2.3.!lib_ui)。

#### 区分 `__design__` 状态

因为为库化 UI 在 design 态与非 design 态都能被引用，精确的展示界面定义，开发库化 UI 时需小心处理程序运行状态。

宜用 `W.__design__` 识别当前程序处于 design 态，还是非 design 态，design 态要作特殊处理。尤其针对那些编辑后导致内容修改、点击产生提交等操作，要作限制，避免尚正在可视化设计中的界面，真实的提供产品功能。

#### 集中定义可配置参数

预定义库化 UI 中的构件可能很复杂，有许多层子构件，为封装性考虑，我们通常只在被引用的位置提供若干可配置参数项。既然库构件作为整体提供给用户使用，它内部怎么构成大家不会关心。

比如厂商 `rewgt` 预定义一个 `".rewgt.book_top"` 库构件，它的组成是：

```
    Div             // key: book_top
    +-- P           // key: p
    |   +-- Img     // key: img
```

顶层 `book_top` 是被引用的位置，常用可配置属性都在该节点定义，即便某些配置项用于控制子层构件，也需在入口节点定义，比如 `data-width` 与 `data-height` 用来设置图片的宽、高，在入口节点定义，但在最里层 `Img` 构件中使用。

实现这个库构件时，Img 节点宜用 `$width='ex.parseInt(duals["data-width"])'` 引用入口节点的 `data-width` 属性值。用可计算属性引用的好处是：让编程简化，“更新链” 自动建立并自动维持，当源头属性值变化时，引用的目标属性会自动更新。

&nbsp;
