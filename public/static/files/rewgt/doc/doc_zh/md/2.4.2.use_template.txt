2.4.2 使用模板
---------------

&nbsp;

Shadow Widget 提供 3 种模板：TempPanel、TempDiv、TempSpan，正式运行时，这 3 种构件都不显示到界面，但在可视化设计界面（参见 [可视化设计使用手册](#5.)）它们在选中时将显示界面，以便让模板中的各个构件可见、可编辑，这时 TempPanel、TempDiv、TempSpan 分别对应于 Panel、Div、Span 构件。

因为模板可在 W 树的任意位置添加，而 Panel 类构件、Div 类构件、Span 类构件可挂到哪些节点下受到条件约束，比如 Span 构件不能直接往 Panel 上挂，所以，我们提供 3 种模板来适应这种约束。

#### 将上一节例子改用模板实现

只需增加模板构件，把要克隆的源节点定义到模板构件下，`$=path` 引用也改向模板下的源节点，如下：

``` html
  <div $=Panel key='top' height='{null}'>
    <div $=TempDiv key='tmp'>
      <div $=P key='hello' width='{0.9999}'>Hello, world!</div>
    </div>
    <div $='//tmp.hello' sty__='color:red'></div>
    <div $='//tmp.hello'>How are you?</div>
  </div>
```

为模板下的源节点提供投影式声明，被引用后投影声明也是生效的，比如界面定义：

``` html
  <div $=P key='test' width='{0.9999}'>
    <div $=TempSpan key='tmp'>
      <span $=Button key='btn'>test 1</span>
    </div>
    <span $='//tmp.btn'>test 2</span>
    <span $='//tmp.btn' key='last_btn'>test 3</span>
  </div>
```

投影式声明：

``` js
  main['.body.top2.test.tmp.btn'] = {
    $onClick: function(event) {
      alert(this.duals.keyid);
    },
  };
```

以上举例参见 demo22。

#### 就近定义模板

定义模板的目的是供克隆引用，否则它自身不显示，单独存在缺少意义。模板应尽量定义在离引用较近的地方，如果没有特殊要求，被引用节点一般是引用节点的兄弟节点（或兄弟节点子节点）。

就近定义模板，便于用相对路径去定位。从参考基点出发，`"//key"` 表示从上一级查找 `key` 节点。当模板离引用很远时，`$` 路径值可能要用绝对路径，书写麻烦且不利于组件化开发。

还可以把模板挂到导航面板（NavPanel 或 NavDiv）下，这样，同一导航段内可以用 `"./template"` 相对路径方式方便的引用。

#### 模板之下可以再挂模板

同一功能组内的多个模板，通常并列定义，有时为了理解方便，让一个模板包含另一模板，也是可以的，比如：

``` html
  <div $=TempDiv key='tmp'>
    <div $=TempDiv key='tmp'>
      <div $=P key='hello' width='{0.9999}'>template in template</div>
    </div>
  </div>
  <div $='//tmp.tmp.hello' sty__='color:blue'></div>
```

模板包含模板通常因为它们的业务逻辑本身就需要用包含方式表达，引用时逐层取路径即可（如上例 `//tmp.tmp.hello`），模板下的非模板节点供引用，模板自身不应被引用，因为克隆一个模板节点缺少实际使用价值。

#### 引用的引用

经引用克隆而来的节点，可以再次被引用，这种 “引用的引用” 可以叠加多层，每层都可新定义一些属性，新属性会覆盖同名旧属性。引用是动态生效的，被引用节点要先创建，否则引用一个尚不存在的节点系统会报错。

“引用的引用” 常在模板内定义，比如将基础功能定义为模板，然后把它的若干变种（即：引用它并重定义某些属性）也定义到模板。比如：

``` html
  <div $=TempDiv key='tmp2'>
    <div $=P key='normal' width='{0.9999}'>It is an example.</div>
    <div $='//normal' key='hint' sty__='color:gray'></div>
    <div $='//normal' key='warning' sty__='color:red'></div>
    <div $='//warning' key='error' sty__='font-weight:600'></div>
  </div>

  <div $='//tmp2.normal'></div>
  <div $='//tmp2.hint'></div>
  <div $='//tmp2.warning'></div>
  <div $='//tmp2.error' sty__='font-size:20px'></div>
```

以上举例参见 demo23。

#### 为引用后的子节点指定 style 配置

以 `'$=path'` 实现引用的节点，还可以带 `styles` 属性，来指明引用复制后各个子节点的附加 `style` 定义，举例如下：

``` html
  <div $=TempDiv key='tmp3'>
    <div $=P key='normal' width='{0.9999}'>
      <span $=Span key='txt' sty__='font-weight:600'>It is an example.</span>
    </div>
  </div>

  <div $='//tmp3.normal' styles='{{"txt":{"color":"blue"}}}'></div>
```

在 `styles` 中可以指定一个或多个子节点的附加 `style` 配置，子节点既可以是直接下层节点，也可以是间隔了 N 层的子节点。如上面代码所示，相对路径为 `"txt"` 的子节点，指定附加 `style` 为 `{"color":"blue"}`，引用的文本将以蓝色字体显示。

属性 `styles` 的值只在 `$` 引用展开时使用一次，它不是双源属性。

&nbsp;
