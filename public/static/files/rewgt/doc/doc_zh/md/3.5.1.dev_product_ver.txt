3.5.1 开发版本与发行版本
-----------------------

&nbsp;

#### 开发版本与发行版本的关系

同一产品有发行态与调测态并存的需求，比如产品已发布，但发现 Bug 后立即启动调测来定位问题，通常我们要求一个产品工程同时支持以 production 或 development 形态来运行，而不是在两个目录分别保存开发版与发行版两个工程。

所以，对于运行在本机的调测环境而言，开发版与发行版是同一工程的两种启动方式。

对于运行中的工程，系统通过 `W.__debug__` 取值识别当前版本是否处于调测态，编程中我们可以广泛插入如下代码来辅助调测：

``` js
if (W.__debug__) {
  // write some code for debugging
}
```

对于经 browserify 或 webpack 组织的开发项目，调测通过后，发布产品有三种方式：

其一，直接使用 browserify（或 webpack）输出的 JS 打包文件（bundle.js），这个 bundle.js 已是 ES5 规格，是否 minify 压缩可选，业界已有许多 `JS minify` 工具，选择一款做压缩即可。

其二，也使用 bundle.js，但将它包含的标准库（如 React、Shadow Widget 等）剔除，改用 `<script>` 导入这些库的 cdn 版本。

比如在网页文件中这么书写：

``` html
  <script src='https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.min.js'></script>
  <script src='https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.min.js'></script>
  <script src='js/shadow-widget.min.js'></script>
  <script src='js/bundle.js'></script>
```

如何生成剔除标准库的 bundle.js 文件在下文介绍。

其三，将 bundle.js 分拆成底层依赖的标准库与自己的代码两部分，标准库如 React 等采用 cdn 版本，自己的代码则改造成 “MAIN 模块”，如何改造在下文介绍。这么做的好处理是实现代码分离，方便了重用，如果代码都一股脑打包在 bundle.js 中，换个开发场景很难重的。

#### 发布前的版本如何调测？

如果不搭建工程环境，像 [“简单示例”](#1.1.4.!demo) 举例的 demo1 工程那样，只在 html 网页中编程，运行被测工程比较简单，只两步：

1. 在本机启动 WebService 服务
2. 在浏览器访问工程目录（如 `http://localhost:3000/demo1/`），就把被测工程运行起来了

如果像 [“搭建工程环境”](#3.1.) 描述的那样建立 browserify 或 webpack 工程环境，在网页 html 文件中，用 `'<script src="bundle.js"></script>'` 导入 bundle.js（这正是打包工具缺省输出的文件）。同样在本机 WebService 启动后，再在浏览器访问工程目录，当前工程即被运行。

上述 3 种产品发布方式无非改变 bundle.js 的组织形式，不影响调测操作。

#### 生成剔除标准库的 bundle.js

若用 browserify 打包工具，将标准库从 bundle.js 剔除用 `-u` 选项，原有 `npm start` 执行如下命令（见 package.json 中 start 命令）：

``` bash
    watchify index.js -v -o bundle.js -t [ babelify --presets [ es2015 react ] ]
```

剔除 3 个 cdn 库，`npm start` 改用：

``` bash
    watchify -u react -u react-dom -u shadow-widget index.js -v -o bundle.js -t [ babelify --presets [ es2015 react ] ]
```

参数 `-u` 用来指示剔除哪个依赖库。

若用 webpack 打包，应在 webpack.config.js 中配置 externals，将 `react, react-dom, shadow-widget` 三个库定义为 external 即可，详情请参考 webpack 用户手册。

产品正式发布时，我们建议将依赖的标准库独立出来，标准库用 cdn 版本。因为，标准库通常较大，有时不只当前工程依赖它，其它网页也可能依赖它，近期用过的标准库能被浏览器缓存，将标准库独立出来分别导入，可减少远程加载次数，另外，上层依赖标准库的版本也能灵活替换，尽量让用到的底层库统一到某个版本，否则，同一底层库在一个网页有数个版本被加载，容易引发不可预知的问题。

打包过程可能很复杂，上面只涉及 js 文件，实践中可还会涉及 css 转换、图片合并等，请尽量采用第 3 方工具（如 gulp），把打包过程自动化起来。

####  MAIN 模块的导入过程

如前文 [“用户扩展 JS 文件”](#2.7.2.!js_module) 介绍，“MAIN 模块” 不是一个模块，而是多个 js 文件，这些文件要在 shadow-widget 库导入之前用 `<script>` 导入进来，各 “MAIN 模块” 均按如下格式编写：

``` js
if (!window.W) { window.W = new Array(); W.$modules = [];}
W.$modules.push( function(require,module,exports) {

// ...

});
```

上述代码实质是在 `W.$modules` 登记本模块代码，然后等 shadow-widget 库 “就绪” 后，由 “shadow-widget 库” 逐一导入各 MAIN 模块的代码，这里，“就绪” 意味着：

1. React 与 Shadow Widget 库已导入
2. 在 HTML 网页定义的转义标签尚未导入
3. 已准备好 require 函数，所以，各 MAIN 模块中可用如下 require 语句：

``` js
var React = require('react');
var ReactDOM = require('react-dom');
var W = require('shadow-widget');
```

各 MAIN 模块在 `main.$$onLoad, main.$onReady, main.$onLoad` 注册初始化函数（参见 [API 手册：初始化列表](#4.1.3.)），当所有 MAIN 模块导入后，系统接着导入在网页中定义的转义标签，之后，依次执行在 `main.$$onLoad, main.$onReady, main.$onLoad` 注册的初始化函数。

#### 将 bundle.js 中的代码改造成 MAIN 模块

经 browserify 或 webpack 管理的 JS 模块，已将所有用到 JS 文件，包括依赖库，一并打包了。像 react、react-dom、shadow-widget 等源码缺省也一起打包，除非用了特别指令（如 browserify 的 `-u`）将特定的库排除。

如果想把自己编的代码从 bundle.js 挪出来，改造成 “MAIN 模块”，只需：

1. 创建一个新的 JS 文件，编写如下代码   
`if (!window.W) { window.W = new Array(); W.$modules = [];}`   
`W.$modules.push( function(require,module,exports) {`   
`// write your code here ...`   
`});`

2. 从 bundle.js 中找出相关代码，拷贝到上面注释行位置，存盘

3. 之后，在 HTML 页面用 `<script>` 导入这个 JS 文件即可

这种 “MAIN 模块” 可以用作 cdn 版本，Shadow Widget 官方的 [shadow-slide 项目](https://github.com/rewgt/shadow-slide) 与 [bootstrap 构件库](https://github.com/rewgt/shadow-bootstrap) 就是按上述方法制作 cdn 版本的。

&nbsp;
