2.4.1 节点引用
----------------

&nbsp;

#### 节点引用是什么？

界面开发中，经常遇到若干相似节点连续出现的情况，如果用转义标签逐个描述每个节点，显得很笨拙，也容易出错。Shadow Widget 采用 “节点引用” 的方式解决这个问题，简单而言，**节点引用就是可修改特定属性的节点克隆**。

比如下面界面定义了 3 段文本：

``` html
  <div $=Panel key='top' height='{null}'>
    <div $=P key='hello' width='{0.9999}'>Hello, world!</div>
    <div $=P sty__='color:red' width='{0.9999}'>Hello, world!</div>
    <div $=P width='{0.9999}'>How are you?</div>
  </div>
```

如果改成节点引用的方式，如下：

``` html
  <div $=Panel key='top' height='{null}'>
    <div $=P key='hello' width='{0.9999}'>Hello, world!</div>
    <div $='//hello' sty__='color:red'></div>
    <div $='//hello'>How are you?</div>
  </div>
```

这里 `$` 属性有两种应用，一是指示 WTC 类，如 `$=Panel`，二是指示引用路径，如 `$='//hello'`。区分这两者的规则是：**如果首字母是 `'.'` 或 `'/'`，表示 `$` 属性用来指示引用路径，否则被视作指示 WTC 类**。

后 2 段文本只需克隆第 1 段，并分别修改字体颜色与文本内容。`$='//hello'` 指明引用路径，以当前 `$` 属性所在节点为参考基点，引用路径中的 `"//"` 前缀表示从上一级查找。在 `$` 属性之后，接着定义要替换的属性即可，如上，首个节点引用替换文本颜色，第二个节点引用替换文本内容。

如果引用非 inline 节点，用 `<div $='path'>`，如果引用 inline 节点，要用 `<span $='path'>`，inline 节点引用举例如下：

``` html
  <div $=P key='test' width='{0.9999}'>
    <span $=Button key='btn'>test 1</span>
    <span $='//btn'>test 2</span>
  </div>
```

#### 引用后的节点继承了源节点属性

节点被引用后，常规属性被原样继承，未被继承只有 `key` 及另两个内部属性（挂到哪个父节点、引用路径），引用时，新定义属性将替代原属性（如果存在旧属性的话）。

除了属性继承，投影式声明所定义的属性，也一律原样继承。比如：

``` js
  main['.body.top2.test.btn'] = {
    $onClick: function(event) {
      alert(this.duals.keyid);
    },
  };
```

我们定义被引用的源节点，鼠标点击时弹出显示 key 值的信息窗口。现在用 `$` 引用该节点克隆一个新节点，新节点被点击时，同样会弹出显示 key 值的信息窗口。

本节以上内容，使用 demo21 举例。

#### 将克隆源节点用作样板

上面例子中，被克隆的节点被使用（在界面显示），如果隐藏它只需指定 `sty__='display:none'`，然后在 `$` 引用时定义 `sty__='display:block'` 让克隆后节点显示即可。

大量使用节点克隆时，源节点通常视作样板，样板不供用户直接使用，即，不显示到界面，仅供 `$` 克隆引用后使用。现在，我们提供一种规范的样板描述方式：模板，模板自身不在界面显示，其下子节点被引用（克隆）后才显示到界面，下一节将详细介绍模板的规格。

&nbsp;
