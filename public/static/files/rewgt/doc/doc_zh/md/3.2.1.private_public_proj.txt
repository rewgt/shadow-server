3.2.1 私有工程与公有工程
---------------------

&nbsp;

#### shadow-server 的目录结构

shadow-server 是 Shadow Widget 开发系统在本机提供的 WebService 服务，前面介绍的众多样例工程，通过类似 `http://localhost:3000/demo1/` 形式访问的，都是 shadow-server 软件提供的 Web 服务。在 [“简单示例”](#1.1.4.!demo) 中，我们介绍了 shadow-server 如何安装方式，安装后目录结构如下（已略去一些无关目录）：

```
  user
  +-- shadow-server
  |   +-- public
  |   |   +-- static
  |   |   |   +-- demo1
  |   |   |   +-- demo2
  +-- shadow-widget
  |   +-- bundle.js
  +-- public-project
```

其中 `user` 是本系统的 **总根目录**，`user/shadow-server/public/static` 是私有工程目录。如上图，demo1 与 demo2 是私有工程，shadow-server、shadow-widget、public-project 是公有工程。

#### 为什么要区分公有工程与私有工程？

私有工程是只有自己才关心的，公有工程则是来自他人共享，或自己要共享出去的。凡涉及多人资源共享，必会遭遇重名问题， user 目录可理解为我们对世界上所有工程取一个当下关注的映射子集，这个集合有重名问题，但如果将它与特定网站（如 github）所管理的项目对应起来，重名问题可以有效缓解。

但在本机做开发，新建工程的命名可能很随意，我们希望随意命名的工程，不要与已受管理的公有工程掺和一起，所以要在两个目录，分别管理公有与私有工程。当私有工程的命名与某公有工程重合时，用 URL 访问得到的是私有工程下文件。这种处理方式与常规编程中，如果局部变量与全局变量重名就自动取局部变量类似。

#### 工程目录的特殊服务

在 Shadow Widget 中编辑或浏览一个 SPA（Single Page Application），或一篇文档，均以 “工程” 为单位。尽管工程目录与其它目录一样，在浏览器中都用 URL 存取内容，但工程目录是一种特殊目录，在它之上会附加特定操作，比如我们的可视设计器用 `"project/$creator"` 打开 `project` 工程的 `index.html` 文件进行编辑，`$creator` 是一种服务，而不是某个文件名，类似的还有 `$save` 等内置服务，专供界面可视化设计器调用。

诸如 `$creator, $save` 等服务只在工程目录下提供，这意味着，**我们的可视化编辑器只针对工程目录下的 `*.html` 文件有效**，非工程目录直属的网页文件将无法被编辑。尽管如此，工程目录下的网页在编辑后整体搬移是允许的，间接实现非工程直属 `*.html` 的定制开发。若想让网页文件可任意搬移，应以相对路径方式引用所有资源（如图片、js、css 等文件等）。

#### 绝对路径引用

在本机启动 Web 服务后，各个工程下的文件有两种绝对路径引用方式，比如要引用 `shadow-widget` 工程目录下的 `bundle.js` 文件：

```
  /shadow-widget/bundle.js
  /app/user/shadow-widget/web/bundle.js
```

前者是常规应用形式，后者为 **“安装项引用”**，是 `localhost` 与 `pinp.me` 两个站点均兼容的应用形式。这两种形式在本机 Shadow Widget 服务程序（即 `localhost:3000`）均被支持。

“安装项引用” 将引用对象看作已安装 APP 的文件，URL 路径固定用 **`"/app/user"`** 开头，以此定位 APP 位置，若仅在 localhost 本机使用，`"user"` 可取任意名称（不影响效果）。URL 的工程名（如这里的 `"shadow-widget"`）之后插入 **`"web"`** 段，指示使用 APP 的 `web` 版本分支， `"web"` 是固定用法，不能改成别的名称。

前面所提 “总根目录” 的 `user` 与 “安装项引用” 中的 `user` 同义，在`localhost` 本机访问时，因为它不必在文件定位中发挥作用（总根目录是固定的，就一个），总根目录名也可改成其它任意名，不影响使用效果。比如将它改成 `shadow-widget` 在 github 注册的账户名 `"rewgt"`，这样，工程 `rewgt/shadow-server` 与 `rewgt/shadow-widget` 在本机与 github.com 同时存在，本机目录与 github 上的目录统一了，理解起来更方便。

由 `shadow-widget` 工程共享的 `bundle.js` 文件， 已将 `react, react-dom, shadow-widget` 这三者的 js 库打包一起，在新建工程的 html 文件中添加如下引用，以便快速建立 Shadow Widget 开发环境。

``` html
  <script src="/shadow-widget/bundle.js"></script>
``` 

或者这么用（插入了 `/app/rewgt` 与 `web`）：

``` html
  <script src="/app/rewgt/shadow-widget/web/bundle.js"></script>
``` 

新建的工程既能上传到 `github.com`，也能上传到 `pinp.me` 站点，但只有采用后者 “安装项引用” 方式，`pinp.me` 下的网页才能在线正常打开。所以，如果弃用相对路径方式，改用绝对路径，您须事先想清楚最终版本要发布到哪个网站。

&nbsp;
