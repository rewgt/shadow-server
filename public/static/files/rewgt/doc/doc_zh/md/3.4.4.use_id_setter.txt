3.4.4 idSetter 预定义
----------------

&nbsp;

#### 用 idSetter 函数组装子成员节点

前面 [“在 JSX 中使用 WTC”](#3.4.1.) 一节介绍过一种以 json-x 建立界面样板，动态更改 json-x 局部数据，并在 `id__` 的 setter 函数中让更新生效的方法。

下面介绍如何用 idSetter 定义的方式实现同样功能，因用到 JSX 句式，需经 babel 转译，若不想转译，不妨改用 json-x 方式表达。代码如下：

``` js
  var childStyle = {};
  
  function id__(value,oldValue) {
    if (value <= 2) {    // no need prepare render content
      if (value == 1) {  // init process
        this.defineDual('color',null,'');  // change color by: duals.color = 'red'
      }
      // else, value == 2 for mount, value == 0 for unmount
      return;
    }
    
    childStyle = ex.update(childStyle,{$merge:{color:this.state.color}});
    utils.setChildren(this,[
      <t.P key='txt' style={childStyle}>How are you?</t.P>
    ]);
  }
```

将 idSetter 函数挂入：

``` js
function onLoad() {
  var body = W.W('.body').component;
  body.setChild(
    <t.Panel key='top' $id__={id__}></t.Panel>
  );
}

W.$main.$onLoad.push(onLoad);
```

如上一节介绍，一个 idSetter 函数等效于在 `getInitialState, componentDidMount, componentWillUnmount, render` 各函数中编码，我们只需逐层定义并传入 `$id__` 函数，用 JSX 或 json-x 表达式即完整支撑所有开发，这种开发方式也是基于函数式风格的。

请注意，在 idSetter 函数中调用 `utils.setChildren()` 来更新子成员节点时，须用 `key` 值指明各个子成员，因为 idSetter 函数会被 `render()` 频繁调用，若不指明 `key` 值，系统会创建新节点，而非更新已存在的子节点。

#### 在 idSetter 模块预置 setter 函数

除了将 setter 函数传给 `$id__` 属性，Shadow Widget 还支持用一个路径字串指示系统从预定的地方找到 setter 函数。

例如，把上面代码改写成如下样式：

``` js
var React = require('react');
var ReactDOM = require('react-dom');
var W = require('shadow-widget');

var T = W.$templates, utils = W.$utils, ex = W.$ex, idSetter = W.$idSetter;

var t = utils.getWTC('*');

function onLoad() {
  var childStyle = {};
  
  idSetter['.body.top'] = function(value,oldValue) {
    if (value <= 2) {    // no need prepare render content
      if (value == 1) {  // init process
        this.defineDual('color',null,'');  // change color by: duals.color = 'red'
      }
      // else, value == 2 for mount, value == 0 for unmount
      return;
    }
    
    childStyle = ex.update(childStyle,{$merge:{color:this.state.color}});
    utils.setChildren(this,[
      <t.P key='txt' style={childStyle}>How are you?</t.P>
    ]);
  };
  
  var body = W.W('.body').component;
  body.setChild(
    <t.Panel key='top' $id__='.body.top'></t.Panel>
  );
}

W.$main.$onLoad.push(onLoad);
```

`W.$idSetter`（简称 idSetter 模块）用来预先登记各节点的 `$id__` 函数，然后在 JSX 中，用类似 `$id__='.body.top'` 的方式引用，让系统从 `idSetter['.body.top']` 查找预先定义的 idSetter 函数。这样，直接给 `$id__` 传递 setter 函数，与传递路径字串是等效的。

用来从 idSetter 模块检索的一般要求用路径字串，如上面举例的 `".body.top"`，也可以用其它字串，只要保证检索不冲突就行，另外还得避开厂商名前缀（比如 `".rewgt."`，因为 `rewgt` 是经合法注册的厂商名称），参见 [“idSetter 保留路径”](#3.2.3.!idsetter)。

#### 给 `$id__` 传函数还是传路径字串？

在 `duals.id__` 的 setter 函数中，我们既可以接管当前节点如何组织它的子成员，也可以不接管，比如上面例子，在 idSetter 模块预设的 setter 函数中，如果不调用 `utils.setChildren()` 就不接管了。

采用函数式编程风格，还是指令式风格，对接不接管子成员组装，以及给 `$id__` 传路径字串还是 setter 函数都产生影响。越倾向于函数式编程，就越多接管子成员组装，越多即时传递 `$id__` 的 setter 函数（而少在 idSetter 模块预先定义）。

**凡子节点动态有增删，宜在 `duals.id__` 的 setter 函数中接管子成员组装**，对这两种编程风格均如此。但如果不增删子成员，只动态更改节点属性，这时，接不接管子成员组装是可选的，对于函数式编程，尽可能接管。而用指令式编程时，不必接管，只需考虑如何用双源属性构造单向数据流特性，而且，尽量在 idSetter 模块预定义供 `$id__` 使用的 setter 函数，让 setter 与 JSX（或 json-x）清晰分离，管理与维护会更便利。

#### 避免与指令可计算属性混用

如果您已用编程方式接管子节点的组装过程，就不应再用 `$for, $if, $elif, $else` 这 4 个 “指令可计算属性” 让下级节点有条件的展示。尽管这两种方式都能达到目标，前者动用编程手段，表达能力强些，但是，这两者思维方式差别较大，并用容易产生混乱，得不偿失。

所以我们建议：在前端开发中，要么采用 “指令可计算属性” 组织你的界面，要么采用编程方式动态组装各层节点，两者二选一，尽量避免混用。当然，用 `$for=''` 或 `$$for=''` 开启一层 callspace 是例外，它没有动态组装子节点，只是让下层可计算表达式可用而己。

&nbsp;
