2.1.1 转义标签
-------------------

&nbsp;

#### 转义标签的规则

在 Shadow Widget 中，转义标签用来替换 react 的 JSX 描述方式，以符合原生 HTML 标签规格的形式直接描述 DOM 片断。

- 规则1：只允许在 `span` 与 `div` 两种标签内用 `$=Tag` 的形式表达转义，比如：   
&nbsp;&nbsp; `<div $=P><span $=Span></span></div>`   
说明：后面还会介绍一种用 `pre` 替代 `div` 的情形，所以，实际支持 `span, div, pre` 三种标签。

- 规则2：span 标签中的转义，只允许转成行内标签（inline tag），div 与 pre 转义则转成非行内标签（none-inline tag）。下面是错误用法：   
&nbsp;&nbsp; `<span $=Div></span>`

- 规则3：转义标签下的常规子节点与其文本子节点，只能二选一，如果两者同时使用，文本子节点将被忽略。比如：   
&nbsp;&nbsp; `<span $=Span>example <span $=Span>text</span></span>`   
显示为 `text`，而非 `example text`。

#### 转义标签中的属性定义

在转义标签中定义的属性，将以 props.attr 的方式传递给 react 系统来创建 component，比如：

``` html
  <div $=P name='desc' data-state='OK' height='{40}'>example</div>
```

指示转义的 `$` 属性值并不传递给 react 的 component，如果属性值以 `{` 开头并以 `}` 结尾，表示它的正文（指掐去头尾花括号后的字串）是 JSON 数据，如上面 height 属性传递值为 40，是 number 类型，而非字串。 注意，传递的 JSON 字串要求严格合规，否则系统调用 `JSON.parse()` 时会报错。

上面转义标签与如下语句等效：   
&nbsp;&nbsp; `React.createElement('p',{name:'desc','data-state':'OK',height:40},'example');`

转义标签中使用的属性名如果用 `"-"` 连接，为遵守 react 使用约定，其命名要调整成驼峰方式（camelCased），比如：`border-width` 要调整成 `borderWidth`，但 `"data-"` 开头与 `"aria-"` 开头的例外，如：`data-state` 仍维持 `data-state` 属性名。

所有 Shadow Widget 控件都支持 key 属性，它实际就是 react component 的 key 属性，用来在本层唯一标识本节点。如果构件的 key 值未显式给出，系统将自动为它分配 0、1、2 等整数值作为它在本层的唯一 ID 号，如果指定 key 属性，应指定一个字串，该字串可使用的合法字符如下：

```
      _    a~z    A~Z    0~9
```

将本节点的 key 及其所有上层各节点的 key 用点号（即 "."）串接起来，就是本节点的绝对路径，例如：`".body.top.test"`，路径字串在查找构件、引用构件、拷贝构件等场合使用。

除了 key 属性比较特殊外，Shadow Widget 对另两个属性还作特别处理：klass 与 style。

#### 特殊属性：klass

React 用 className 属性表示 DOM 节点的 class 字串，这个属性非常有用，以致离开它就玩不转前端开发了。Shadow Widget 将该属性按两种功能去理解，其一是标识控件的特征，其二是标识控件的运行状态，前者在控件的使用期间保持不变，后者则动态可变，比如控件选中了，增加 `selected`  类定义，定义相应的 css 让控件呈现选中的样式，取消选中就删除这个 `selected` 类。Shadow Widget 区分这两种不变与可变的 class 类似，方便了管理，其中，前者不可变 class 仍用 react 的 className 表达，而后者可变 class 则用 klass 属性表达。

多数情况下，用户不必关心控件的 className 属性，既然表达不可变类名，创建控件时已缺省指定，用户需要关心的是如何传递 klass 属性，比如：

``` html
  <div $=P klass='default-large-small'>example</div>
```

如果把 klass 值改为 `large-small-default`（或 `small-default-large`），可发现当前节点的字体变大（或变小）了。

Shadow Widget 推荐采用 **以 "-" 字母分割各个状态** 的命名方式，如 "default-large-small" 表达 3 种状态，并且，其中第一个状态（本例是 `default`）指示当前状态，将 klass 改为 "large-small-default" 则表示切换到 `large` 状态。如果采用这种命名，可视化设计界面已提供辅助手段，让你点一下按钮就能快速切换 klass 状态。

多个 class 命名可在 klass 属性中同时使用，比如：

``` html
  <div $=P klass='default-large-small auto-hidden-visible' height='{40}'>example</div>
```

#### 特殊属性：style

某些浏览器会检验并自动调整 `style` 属性值，比如 IE11 认为 `style='{{"dispaly":"none"}}'` 不合法，自动将它改为 `style=''`，Firefox 会删除 `style` 中它不支持的属性。为避免让浏览器干扰 `style` 转义表达，我们改用 `sty__` 表示 `style`。

说明：我们仅在转义标签中用 `sty__` 代替 `style`，其它地方，如 `duals.style` 仍用 `style`。

因为 `style` 极为常用，Shadow Widget 特别增强了它的功能，其一，在转义标签中，既可以将 `style` 写成字串格式，也可写成 react 要求的 Object 格式，比如，下面两种书写方式都是正确的。

``` html
  <div $=P sty__='background-color:#ccc'>example</div>
  <div $=P sty__='{{"backgroundColor":"#ccc"}}'>example2</div>
```

其二，style 自动被定义成双源属性，运行中可以用 javascript 语句这么赋值：   
&nbsp;&nbsp;&nbsp; `component.duals.style = {backgroundColor:'red', display:'none'};`   
duals.style 赋值按覆盖合并的方式进行，即，同名 css 属性被新值覆盖，未被覆盖的维持原值。比如在上面语句运行后，再运行：   
&nbsp;&nbsp;&nbsp; `component.duals.style = {display:''};`    
就只替换 style.display 值，原 style.backgroundColor 值不变。

说明：   
1) 将 style 下某 css 属性赋空字串，表示恢复该属性的缺省值。   
2) 本节所举例子在 demo2，源码可从安装路径下 `shadow-server/public/static/demo2/` 找到。

#### 转义标签中的属性要显式赋值

HTML 标签中允许类似如下 `disabled` 简写的属性定义：

``` html
  <button disabled>test</button>
```

转义标签中要显式给所有属性赋值，省掉等号赋值的属性定义不再支持，比如要写成如下方式：

``` html
  <span $=Button disabled='1'>test</span>
```

#### 转义与非转义标签混用

若在转义标签的子节点混入非转义标签，系统将自动把它视作 **“静态节点”**，尝试原样放到指定位置。比如：

``` html
  <div $=P><span>text1</span><span>text2</span></div>
```

这里显示 text1 与 text2 的 span 节点因未用 `$` 转义，所以这两者是 **“非转义标签”**，最终界面显示的是：

``` html
  <p class='rewgt-unit'>
    <span class='rewgt-static'>
      <span>text1</span><span>text2</span>
    </span>
  </p>
```

也就是，连续的静态节点被自动整理到一个 class 为 rewgt-static 的节点下了。

尽管静态节点用起来很方便，但它无法介入 react 编程系统（因为静态节点不是虚拟 DOM），通常我们只把静态节点用作文本信息展示，没有交互，无关编程控制。

另外，静态节点插在转义标签内使用，还需符合转义标签对其子节点的格式限制，比如，您不应直接将静态节点插到服务于布局的面板控件（Panel）中（应改插到面板下的段落控件或 Div 控件中），再如，不该将静态节点插到 Input 控件中，因为 `<input>` 不带子节点。

&nbsp;
