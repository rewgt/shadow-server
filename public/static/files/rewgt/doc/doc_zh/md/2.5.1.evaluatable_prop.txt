2.5.1 可计算属性
----------------

&nbsp;

可计算属性用 `'$'` 前缀来标识，其值是一个可解释执行的 javascript 表达式字串。

#### 一个简单例子

如下定义界面（请参考 demo26）：

``` html
  <div $=Panel key='top' height='{null}'>
    <div $=P key='hello' width='{0.9999}' $for='' dual-data='{{"name":"Wayne","lastName":"Chan"}}'>
      <span $=Input key='name' $value='duals.data.name + " " + duals.data.lastName'></span>
    </div>
  </div>
```

`$value` 是可计算属性，其值是可计算的表达式。我们在 `hello` 节点定义 `duals.data`，然后在它的子节点的 `$value` 可计算表达式中就能引用 `duals.data` 变量了。

如上 `'$for'` 也用于定义一个可计算表达式，但它取空值有特殊含义：开启一个调用空间（call space）。从表达式所在位置向上级各节点遍历，只有 callspace 能找到时，可计算表达式才可以被解释执行。后文还会介绍 `'$for'` 取值为 `"item in expr"`，表示循环构造子节点，请您先记住，`$for=''` 是启用调用空间，这是让可计算表达式生效的**一种固定用法**。

#### 可计算属性能自动更新

上面程序运行中，如果改变 hello 节点的 `duals.data` 取值，`$value` 表达式将自动重新计算。比如在浏览器的控制台，输入如下脚本：

``` js
  W.body.top.hello.component.duals.data = {name:'Hillary', lastName:'Clinton'}
```

运行这行脚本后，Input 构件显示的文本自动变为：`"Hillary Clinton"`。因为 Shadow Widget 在编译可计算表达式时，识别哪些 duals 源数据被引用了，然后自动 listen 数据源，当源头数据变化时，将触发本表达式再作计算。

可计算表达式除了可引用源节点的 `duals.attr`，还可引用 `props.attr` 与 `state.attr`，不过，**只有对双源属性 `duals.attr` 的引用，才具备自动触发表达式重新计算的能力。**

#### 属性引用的路径

在可计算表达式中，`duals.attr`、`props.attr` 与 `state.attr` 可直接使用，均从最近的调用空间（callspace）所在的 R 节点读取（如上面举例的 `duals.data.lastName`）。因为调用空间可以有多层，每层调用都挂靠某个 R 节点，最近的调用空间是指从当前节点出发，向它的父级节点搜索，直到找到挂靠的调用空间。

由于这种向上搜索的定位方式，`duals.attr`、`props.attr`、`state.attr` 也可书写为 `duals(0).attr`、`props(0).attr`、`state(0).attr`，而再往上层取相关属性，可写成：

```
    duals(-1).attr    props(-1).attr    state(-1).attr
```

往上再查找一层：

```
    duals(-2).attr    props(-2).attr    state(-2).attr
```

以此类推，再往上用 `-3`、`-4` 等常数标识，注意：**要用常量**，而非变量来标记，因为自动更新的 listen 机制在表达式编译时刻就生成了，若用变量无从侦听。同理，使用 `duals(sPath)` 时 sPath 也要求用字串常量。 

这种栈式 “节点属性” 的引用机制，让跨层数据引用变方便了，产品开发更容易分层，在不同层级，使用不同功能、不同粒度的数据。

此外，可计算表达式还支持用相对路径（sPath）指示目标节点：

```
    duals(sPath).attr    props(sPath).attr    state(sPath).attr
```

相对路径的参考基点是最近调用空间（即：当前调用空间）所在的 R 节点。如上例，若将 `$value` 改成如下：

``` js
    $value='duals("//").keyid + ", " + duals("name").keyid'
```

表达式的计算结果将是 `"top, name"`。

#### 可计算属性允许被侦听

可计算属性 `$attr` 自动注册成双源属性 `duals.attr`，如上面例子使用了 `$value`，`duals.value` 即自动被注册，`state.value` 也自动可用，注意，这里属性名是去掉 `'$'` 前缀的。
 
可计算属性与常规双源属性一样，可以被侦听，比如（参见 demo26）：

``` js
  main['.body.top.hello.name'] = {
    componentDidMount: function() {
      this._componentDidMount(this);
      
      this.listen('value',function(value,oldValue) {
        console.log('value changed:',value);
      });
    },
  };
```

#### <a name="special_dual"></a>几个特殊的可计算属性

1. `$html` 用来动态更新 `html.` 属性的值，比如：   
`    <span $=Span key='txt' $html='"Hello, " + duals.data.name'></span>`

2. `$data` 相比于常规的可计算属性，差别仅在于：在一次更新中，它先于本节点其它可计算属性被计算。所以，我们常用 `$data` 集中表达入口数据，然后引用该数据（通常引用它的局部数据），形成若干延伸的可计算属性。`$data` 比其它表达式更早计算，这便于让延伸属性更 **“及时”** 的获得同步。

3. `$trigger` 表达式的计算结果会赋给 `duals.trigger`，并随之尝试触发 trigger 动作，参见 [“使用 trigger 触发器”](#2.3.4.!use_trigger)。

#### 使用 `$trigger` 与 `fireType`

Shadow Widget 支持在任意节点定义 `$trigger` 属性，`$trigger` 如何更新计算值，及如何影响触发动作，要受 `props.fireType` 影响。`props.fireType` 支持如下选项：

1. 取值为 `'none'`，表示 `$trigger` 按常规可计算属性的方式进行更新，不额外触发 trigger 动作   
这意味着当它引用的源头双源属性变化后，它会自动更新，计算结果赋给 `duals.trigger`。

2. 取值为 `'auto'`，在上述 `'none'` 处理方式的基础上，如果 `$trigger` 计算结果给 `duals.trigger` 值带来变化了，系统将接着自动触发 trigger 动作。

3. 取值为 `'onsite'`，表示 `$trigger` 表达式只在主动触发（选项构件被选中，或程序中调用 `utils.fireTrigger()`）时，才重新计算，计算结果赋给 `duals.trigger`，有更改时（指 `duals.trigger` 有变化）就触发 trigger 动作。而对于 “非主动触发”，`$trigger` 表达式保持静默，并不自动计算。而对于 “非主动触发”，`$trigger` 表达式保持静默，并不自动计算。

说明：`props.fireType` 不是双源属性，它可以缺省，缺省时视作取 `'auto'` 值。另外，`fireType` 只与 `$trigger` 配合使用，如果未定义 `$trigger`，`props.fireType` 将被忽略。

#### 借助 `$trigger` 逆向同步数据

使用 `trigger` 可定义界面开发中最常用的三种动作，而 `$trigger` 一方面提供自动侦测数据变化的驱动机制，另一方面，它启用脚本驱动，让转义标签具备一定编程能力。两者一结合，大大强化了转义标签的表现力。借助 `$trigger` 表达式能灵活的实现各种复杂控制，比如，取得相关节点的 `props.attr` 或 `state.attr` 值，运用加减乘除、与或非等常规计算，组装字串，列表排序（`ex.order()`），列表重组（`ex.map()`）、列表过滤（`ex.filter()`）等。

编程中，两个或多个节点之间存在数据引用的关系，比如下图中，`nodeE` 引用了在 `nodeC` 定义的数据，假定这两节点在同一段中，`nodeE` 的可计算表达式中可用 `duals("./nodeB.nodeC").attr` 的形式使用 nodeC 中的数据。

```
    nodeA  (NavPanel)
    +-- nodeB
    |   +-- nodeC
    +-- nodeD
    |   +-- nodeE
```

但这种引用方式有个缺陷，因为 `nodeC` 与 `nodeE` 的生存期并不一致，两者可能交叠，但不包含，当存在 nodeE 时 nodeC 未必存在，nodeC 可能是动态安装的。如果是包含，比如 `nodeA` 与 `nodeC`，`nodeA` 生存期必包含 `nodeC`，在内层节点引用外层节点的数据必然安全，因为如果存在内层节点，外层节点必然存在且有效。所以，我们把上述 `nodeE` 引用 `nodeC` 的依赖关系优化一下，改成：

1. 在 `nodeA` 设立 `duals.attr` 属性，赋予缺省值
2. 在 `nodeC` 用 $trigger 表达式动态更新 `nodeA` 的 `duals.attr`，如 `["./",modifier,attr]`，实现逆向数据同步
3. 在 `nodeE` 引用 `nodeA` 的 `duals.attr` 数据

因为 `nodeA` 是 `nodeC` 与 `nodeE` 的共同父级节点，在 `nodeC` 与 `nodeE` 操作 `nodeA` 的数据是安全的，经 `nodeA` 转接，我们实际做到了让 `nodeE` 安全的引用 `nodeC` 中数据。该方法我们称为：借助逆向数据同步实现的单向依赖机制，简称 **“逆向同步 & 单向依赖”**，它在 Shadow Widget 开发中有着广泛的应用。

&nbsp;
