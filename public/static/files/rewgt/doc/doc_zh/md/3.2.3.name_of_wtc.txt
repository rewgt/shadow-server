3.2.3 构件类命名
-------------

&nbsp;

#### WTC 命名约束

Shadow Widget 转义标签中使用的构件固定从 `W.$templates` 下查找，`W.$templates` 简称 T 模块，集中定义下层软件为上层提供的 WTC 定义。通常各个 WTC 类定义与 WTC 类实例一起登记到 T 模块，除了这两者，T 模块中不再定义其它符号，WTC 类实例名就是转义标签中引用的构件名。

在 T 模块针对 同一 WTC，建议大家都遵守相同命名方式：**WTC 类名比 WTC 实例名多一个后缀字母 `'_'`，而且 WTC 实例名不以 `'_'` 作后缀**。如 WTC 实例名为 `'Panel'`，对应 WTC 类名为 `'Panel_'`，这样，保证 WTC 实例名唯一，也就保证了其类名也唯一。

WTC 实例名的首字符要求大写，因为 React 对自定义 tag 都要求首字母大写。

#### 在 T 模块分层定义 WTC 符号

如果您开发的项目仅供自己使用，而且项目规模也不大时，自定义 WTC 类及其实例直接往 T 模块下挂，不要不覆盖原有定义即可。如果项目规模较大，自定义 WTC 较多时，不妨分层登记组织 WTC。比如：

``` js
var T = W.$templates;

T.usr = {
  Login: UsrLogin,
  Login_: UsrLogin_,
  Submit: UsrSubmit,
  Submit_: UsrSubmit_,
};
```

这里 `usr` 是功能模块名，把与用户管理相关的 WTC 符号都挂到 `T.usr` 下。然后在转义标签中这么引用 `<span $=usr.Submit>Save</span>`。

如果您开发的项目是中间组件，对外提供一种 lib 库时，我们要求所有对外共享 WTC 符号都定义到 `T.account` 之下，这里 account 是您在 pinp 社区注册的账户名，由注册账户的唯一性，保证任何厂商共享的构件库命名都不冲突。

如果账户名以 `'-'` 分割多段，要求取 camelCased 风格命名，如 `'abc-def'` 取名 `abcDef`。

#### <a name="lib_ui"></a>库化 UI 的命名

在 W 树根节点定义 TempPanel 模板，然后用 `$` 引用样板界面，这种 UI 设计方式有点像 lib 库引用，我们称为 “库化UI”。

**对于第 3 方提供的 “库化UI”，要求调用 `utils.setVendorLib(sName,callback)` 来登记厂商库的根节点（TempPanel 面板），然后由厂商为他的根面板下各节点分配命名。`sName` 是 camelCased 风格的厂商账户名。比如调用 `utils.setVendorLib("rewgt",callback)` 将登记 `rewgt` 厂商的根节点，然后在这个节点之下挂载一个库化 UI 节点，比如它的 key 值为 `"book_top"`，之后他人就能通过指定路径 `".rewgt.book_top"`，来引用该 UI 节点了。参见 [“安装库化 UI”](#3.6.1.)。

上述规则可保证各厂商公开的 UI 库不冲突，不会互相覆盖。

#### <a name="idsetter"></a>idSetter 保留路径

`W.$idSetter` 提供 `$id__` 函数的预注册功能，`$id__` 函数的功能与投影定义类似，[参见后文](#3.4.2.)。

idSetter 可以用路径名（如 `".body.top.toolbar"`）为索引，也可以自行规划其它形式。但须避开厂商前缀（如 `".rewgt."`），以厂商名（camelCased 风格）作前缀的命名（比如 `".rewgt.share_bar"`）为各厂商保留，此举可避免不同厂商提供的中间件潜藏命名冲突。

#### localStorage 键值命名

由多个厂商基于 Shadow Widget 开发的产品，可能在同一域名提供服务，这虽然不被鼓励，但在特定场合仍广泛使用。比如，为了避免跨域限制，多个厂商可能在同一域名下共享文件资源、编程插件等。再如，在本机调测时，当前开发的工程依赖于多个第 3 方工程，也存在多厂商在相同域名下提供 WebService 服务的情况。

每个厂商在同域如果任意写本地存贮 localStorage 时，容易产生冲突，因为各厂商使用键值可能重名。同样，我们约定各厂商都用 `"account/"` 作前缀取键值，account 是厂商账户名（非 camelCased 风格）。比如 `"rewgt/shadow-book/books"`，前缀 `rewgt/` 区分出厂商，其后的命名由各厂商自行分配，例如第 2 段用工程名就是一种有效方式。

#### 特别声明

本章所建议的命名约束，属于 “弱约束”，主要针对第 3 方库软件开发商。若不遵守，多数情况下程序也正常运行，但，这终归不是好的编程风格，容易给共享、重用带来混乱。所以，凡用 Shadow Widget 开发的工程，建议大家都遵守本章已列明的规则。

&nbsp;
