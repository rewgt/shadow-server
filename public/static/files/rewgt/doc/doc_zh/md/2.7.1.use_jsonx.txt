2.7.1 使用 json-x
-----------------

&nbsp;

#### json-x 描述方式

React 在 javascipt 中编程时，用 JSX 表达虚拟 DOM 节点。Shadow Widget 则用 “转义标签” 与 json-x 表达 JSX 的功能，比如：

> `['P',{'html.':'Hello, world!'}]`

等效于 jsx 的：

> `<P>Hello, world!</P>`

json-x 用数组表达一个节点，格式为 `[type,props]`，这里 type 指示 React class，可以是以下几种：
1. HTML 标签，如 `table, div, input` 等，首字母是小写的
2. 用户自定义的 React Class，首字母大写，通常用 `React.createClass()` 创建
3. 登记在 T 模块下的 WTC 类实例，如：`P, Span` 等

如果一个节点定义了若干个子节点，则用一个数组表示，数组首成员为父节点，其后各项为子节点，比如：

> `[ ['P',{}], ['Span',{'html.':'Hello, '}], ['Span',{'html.':'world!'}] ]`

等效于 jsx 描述：

> `<P><Span>Hello, </Span><Span>world!</Span></P>`

说明：
1. 当 `[type,props]` 的 props 无属性定义时，可省略不写，比如 `['P',{}]` 可简写成 `['P']`
2. 不管 type 用什么值指示 React class，子节点可直接用 string 数据表达 `<span>` 节点   
比如上例改成这样是等效的：`[ ['P'], 'Hello, ', 'world!' ]`

因为 json-x 表达的节点，就是直白的 javascript 数据，均可转化为 JSON 字串，也能从 JSON 字串读回，正是这个特点，我们称之为 json-x 描述方法。json-x 能以文本流方式在网络各节点传递，相比 “转义标签” 的描述方式，json-x 表达方式更严格，使用更灵活，常用于传递片断界面定义，但这两者实现相同功能，表达能力几乎一致。如果在上层做界面开发，在网页直接内嵌 javascript 代码时，因没有 JSX 向 javascript 转译机制，json-x 将成 JSX 最佳替代品。

#### 表达静态节点

在转义标签中使用的非转义标签就是 “静态节点”，参见 [转义标签](#2.1.1.)，比如：

``` html
  <div $=P><span>text1</span><span>text2</span></div>
```

改用 json-x 表达就是：

``` js
  [ ['P',{}], ['',{html:['<span>text1</span>','<span>text2</span>']}] ]
```

json-x 单节点中的 WTC 类名若为空，表示它是静态节点。

#### 表达常规 React 节点

表达常规 React 节点与表达 WTC 节点类似，都用 `[type,props]`，仅 type 不同，比如下面 3 条语句，第一条用来创建 WTC 节点，后两条用来创建常规 React 节点。

``` js
  var jsonX1 = [['P',{key:'txt'}],'How are you?'];    // type is 'P'
  var jsonX2 = [['p',{key:'txt'}],'How are you?'];    // type is 'p'
  var jsonX3 = [[MyClass,{key:'txt'}],'How are you?'];  // MyClass is React Class
```

只有 WTC 节点才能挂到 W 树中，非 WTC 节点不挂到 W 树，其下不能定义 WTC 子节点。比如上面 jsonX2 描述的 p 节点，其下不能定义 Span 子节点，但可以定义 span 节点。所以，下面用法是错误的：

``` js
  var jsonX2 = [['p',{key:'txt'}],'How are you?', ['Span',{key:'sub','html.':'example'}]];
```

将这个 jsonX2 用于界面输出时，将有告警信息打印。

#### 将 json-x 转换为 React Element

调用 `utils.loadElement(jsonX)` 可将 json-x 数据转化为 Element，比如：

``` js
  var jsonX = ['P',{'html.':'Hello, world!'}];
  var ele = utils.loadElement(jsonX);
```

转换所得的 Element，可用于动态组装构件子成员。比如在 `comp.setChild()` 函数中使用。

json-x 是平白数据，它与 jsx 不同，jsx 直接描述 React Element 节点，但 json-x 要经 `utils.loadElement(jsonX)` 转换才成为 React Element 节点。

Shadow Widget 并未提供从 Element 到 json-x 的转换 API，因为在 `utils.loadElement()` 之前，json-x 还可捆绑投影定义，一些函数定义也融入 json-x 数据，这时读入生成的 Element 是复合定义体，相当于内存中的一段程序，从 Element 导出 json-x 没有意义。 

#### 动态组装子节点

demo38 演示了动态组装子节点的例子，先定义界面：

``` html
  <div $=Panel key='top' height='{null}'>
    <div $=Div key='div'></div>
  </div>
```

然后定义投影类：

``` js
main['.body.top.div'] = {
  getInitialState: function() {
    var state = this._getInitialState(this);
    
    var jsonX = [['p',{key:'txt',style:{}}],'How are you?'];
    
    this.defineDual('color',null,'');  // default color is ''
    this.defineDual('id__', function(value,oldValue) {
      jsonX[0][1].style = { color: this.state.color };
      utils.setChildren(this,[utils.loadElement(jsonX)]);
    });
    
    return state;
  },
  
  componentDidMount: function() {
    this._componentDidMount(this);
    
    var self = this;
    setTimeout( function() {
      self.duals.color = 'blue';
    },5000);  // change font color after 5 seconds
  },
};
```

`id__` 是一种特殊的双源属性，除了前面已介绍的用 `if (oldValue == 1)` 识别出首次 render 调用，然后执行特定初始化处理外，`id__` 的 setter 函数常用于动态组装子构件。因为每次 render() 调用都会触发 `duals.id__` 的 setter 回调，即使你用 comp.setState() 刷新时未指定要更新 `id__`，只要当前构件的 render() 函数被调用，都会触发 `duals.id__` 的 setter 回调。

借助该机制，`id__` 的 setter 可用来组装 render 输出内容，在此 setter 函数中运行代码，等效于在 render() 中运行。这个例子中，我们在 `id__` 的 setter 函数中组织 json-x 数据，再调用 `utils.loadElement(jsonX)` 得到 React Element，最后用 `utils.setChildren(comp,children)` 更新全部子成员定义，`jsonX` 数据变化，最终表现为界面变化。

说明：
1. 组装子成员时，最好为每个子成员的 Element 指定 key 值，如上面 定义 json-x 时用 `{key:'txt'}`，若不指定，子成员更新到哪个位置会不确定。
2. 当一个构件不复杂时，用 `utils.setChildren()` 驱动界面变化是合适的，但如果构件内有许多子成员，各级成员之间交互控制（或交互影响）较复杂时，应分层设计各子构件，以双源属性为纽带，各个构件用双源属性组织相互联动与自动更新的关系。

#### 组装子节点注意事项

React 在 `props.children` 记录各个子节点的 `Element`，`Element` 与 `Component` 有差别，未实例化时是 `Element`，实例化后就成为 `Component`。某 `Component` 更新它的子成员时，依据 `children` 记录的 `Element` 进行，如果具有某 key 值的 `Element`，还没有 `Component`，相应子节点 `Component` 将被创建，否则，若存在 `Component`，就用该 `Element` 所传递的属性值来更新这个已存在的 `Component`。

用 json-x 描述各个子节点，**除非仅一个子节点且不更改属性，否则一定要分配 key 值**，要不 React 拿它更新哪个子成员没有依据。

另外，在 props 定义的某些属性自动被注册为双源属性，包括在 html 标签使用的标准属性，`data-*`，`aria-*`，`dual-*` 等，参见 [定义双源属性](#2.2.2.)，但自动注册只在构件首次 `render()` 时操作一次。出于性能考虑，Shadow Widget 设置了此项限制，这意着：**在初始 json-x 数据中，您必须把可能用到的，能自动注册为双源属性的项目列全，而不是在运行中随意增加此类属性**。同样，事件回调函数也应在初始 json-x 列全，动态增加的事件函数传入也不会动态生效。

比如待组装的子构件用到 name 属性，我们应这么定义 json-x 数据：

``` js
  var jsonX = [['P',{name:'',key:'txt',style:{}}],'How are you?'];
```

而不是最初省略 `name`，之后再动态追加，比如执行 `jsonX[0][1].name = 'desc'`。

#### 一次导入多个 json-x

`utils.loadElement()` 可以带 1 个或多个参数，如果只带一个参数，`utils.loadElement(jsonX)` 将返回单个 React Element，即：针对单个 json-x 参数的转换结果。如果传入多个参数（N个），将返回一个长度为 N 的数组，数组内容依次是各个输入 json-x 的转换结果。如果转换不成功，相应的结果值为 null。

举例来说：

``` js
  var ele = utils.loadElement(['P']);
  var b = utils.loadElement(['P'],['Ul',{key:'a'}]);
  assert(b.length == 2);
```

除了 `utils.loadElement()`，还有一个 API `utils.loadElementEx()` 比较常用，它在导入 Element 同时，还顺带捆绑 main 模块中定义的投影类定义。

#### 导入并捆绑投影类

举个例子（见样例 demo38），这么定义界面：

``` html
  <div $=Panel key='top' height='{null}'>
    <div $=P key='p'></div>
  </div>
```

我们在 `.body.top.p` 的 P 节点下，用 json-x 安装一个按钮 Button 子节点（key 为 btn），预先定义按钮的投影类定义：

``` js
main['.body.top.p.btn'] = {
  $onClick: function(event) {
    alert('clicked');
  },
};
```

我们希望用 `['Button',{key:'btn','html.':'Click me'}]` 组装 Button 节点时，将上述投影类定义也捆绑到导入的 Button 节点上，这个投影类只定义了 onClick 事件函数。

调用 `utils.loadElementEx()` 的代码如下：

``` js
main['.body.top.p'] = {
  getInitialState: function() {
    var state = this._getInitialState(this);
    
    var jsonX = ['Button',{key:'btn','html.':'Click me'}];
    this.defineDual('id__', function(value,oldValue) {
      utils.setChildren(this,[utils.loadElementEx('.body.top.p',jsonX)]);
    });
    
    return state;
  },
};
```

把这个例子运行起来，点击 `Click me` 按钮试试，您将发现 onClick 回调事件见效了。

#### loadElementEx 函数规格

`utils.loadElementEx(sPrefix,jsonX,...)` 与 `utils.loadElement(jsonX,...)` 用法很接近，前者要额外用一个 sPrefix 参数（首参数位置）来帮助定位 main 模块下的投影类定义，两者的其它参数及返回值格式是相同的，即：如果传入一个 json-x 数据，返回一个 Element，如果传入多个 json-x，则返回一个容纳了多个 Element 的数组。

上面例子中，路径前缀 sPrefix 为 `'.body.top.p'`，叠加上导入按钮的 `'btn'` 尾路径，全路径就是 `'.body.top.p.btn'`，系统自动到 `main['.body.top.p.btn']` 取得投影定义，并将它绑定到按钮构件。

#### 在 json-x 中传递事件函数

loadElementEx 导入 json-x 同时还绑捆投影定义，如果投影定义比较简单，比如只用到事件函数，我们还可以直接在 json-x 中传递事件函数。比如：

``` js
main['.body.top.p'] = {
  getInitialState: function() {
    var state = this._getInitialState(this);
    
    function onClick(event) {
      alert('clicked: ' + this.duals.keyid);
    }
    
    var jsonX = ['Button',{key:'btn','html.':'Click me',$onClick:onClick}];
    this.defineDual('id__', function(value,oldValue) {
      utils.setChildren(this,[utils.loadElement(jsonX)]);
    });
    
    return state;
  },
};
```

被传递的事件函数中，可以用 `this` 表示它所在的构件，如这个例子中 `this.duals.keyid`。

&nbsp;
