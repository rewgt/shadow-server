2.3.4 选项触发器
------------------

&nbsp;

选项构件具有两大功能，其一是前面已介绍的动态切换场景面板，其二是提供选项触发器。在选项构件选中时，触发器将自动触发预定义的动作。

#### 用 popOption 配置浮层弹窗

上一节举例用编程手段弹出浮层窗口，现改用可选构件实现，只用转义标签描述界面，不必借助编程。定义界面如下：

``` html
  <div $=Panel key='top'>
    <div $=NavPanel key='nav' width='{0.9999}' height='{200}'>
      <div $=Div key='msg' padding='{[0,6]}' sty__='display:none'>
        <div $=P>Hello, world!</div>
      </div>

      <div $=P key='opt'>
        <span $=OptButton key='btn' pop-option=
          '{{"path":"./msg","width":0.7,"height":200,"bodyStyle":{"display":"block"}}}'>
          show hello</span>
      </div>
    </div>
  </div>
```

把 popOption 定义移到选项构件 OptButton，用 `popOption.path` 指定弹窗要引用的内容节点，之后点击该选项构件（即 "show hello" 按钮），系统将弹出同等效果的浮层窗口。

当一个选项构件未定义 popOption 属性时，它用作 “场景面板切换器”，但定义 popOption 后，它自动改用作 “浮层弹窗触发器”，切换场景面板与触发弹窗不可并存于同一构件。

#### <a name="use_trigger"></a>使用 trigger 触发器

所有构件都内置 trigger 双源属性，它用来登记待触发的动作。举例来说，我们在上例基础上再增加一个带 trigger 定义的按钮，让该按钮点击时自动触发动作：

``` html
  <span $=OptButton key='btn2' trigger='//btn'>trigger</span>
```

选项构件在选中时会自动触发在 `trigger` 登记的动作。本例在 demo19 给出，请自行参考相关源码。

trigger 要求是以下三者之一（定义单项动作），或者，用若干下述三种数据组成 array 数组（如：`["//btn", {$trigger: "./pop_win"}, ["./",{$set:data},"data"]]`），来定义多项动作：

1. 用 `sPath` 指出目标节点，目标节点须是选项构件，预设动作是让目标构件也被点选。   
这里，`sPath` 既可以是绝对路径，也可以是相对路径，若为空字串表示自身节点。

2. 用 `{$trigger:sPath}` 让指定触发器（由 `$trigger` 属性以相对路径或绝对路径方式指示）弹出浮窗，触发器要求是定义了 `popOption` 的选项构件。除了用 `$trigger` 指定触发器位置，我们还可额外传递 `popOption` 配置项，稍后有举例。

3. 用 `[sPath,modifier,attr]` 更新指定目标节点的双源属性值，将在下一节详细介绍。

#### 传递 popOption 配置项

比如：

``` html
  <span $=OptButton key='btn2' trigger='{{$trigger:"//btn", width:0.6}}'>trigger</span>
```

路径 `"//btn"` 指定将要触发的选项构件，`width` 指定触发器弹窗的宽度（`60%` 屏宽），该配置将替换触发器缺省定义 `popOption` 所用的同名项目。

关于弹窗触发器的 `popOption` 如何定义，请参考 [上一节](#2.3.3.!pop_option) 介绍。其中 `popOption.path` 需明确给出，否则，因为弹窗的内容节点未指定，弹窗操作将被忽略。

#### 反复触发

由于选项构件在选中后 `data-checked` 属性置 `"1"`，之后再次点选此构件，trigger 预定义的动作自动被忽略。为了让 trigger 动作能多次触发，我们须用 `recheckable='1'` 指明，比如：

``` html
  <span $=OptButton key='btn2' recheckable='1' trigger='//btn'>trigger</span>
```

这样，连续多次点击按钮时，每次它都会触发 trigger 指定的动作。recheckable 是双源属性，它的缺省值为 `""`，非真，表示 “不重复触发”。

说明：Shadow Widget 习惯用 “空字串” 与 “非空字串” 表达属性的 “非真值” 与 “真值”，HTML 节点属性也广泛采用这种风格（如 input 标签的 `checked, readonly` 等）。

#### 禁止选中

所有选项构件都定义 `duals.disabled` 属性，其值为真时，该构件的界面将不响应选中操作。

#### 隔离选项构件

选项构件承担多种功能，它被选中时，可以：
1. 切换场景面板
2. 触发浮层弹窗
3. 连带触发在 `trigger` 预设的，作用于其它选项构件的若干动作（包括切换场景面板、弹出浮窗）
4. 连带触发在 `trigger` 预设的，用于更新其它任意构件的双源属性（相当于调用 `ex.update()`，将在下一节介绍）

这 4 者中，后 3 者属于触发器应用。当选项构件用作触发器时，也称 “选项触发器”。

某些情况下，我们希望选项构件具有隔离功能，被隔离时，不能切换场景面板，但能触发上述后 3 种功能。此种 “隔离” 用双源属性 `isolated` 表示，其值为 `"1"` 表示当前处于隔离态，`""` 表示未被隔离。

**`duals.isolated` 只影响场景面板切换，不影响其它动作响应**。当传入的 `props.isolated` 未给出时，系统会视不同情况让 `duals.isolated` 取不同初值，即：如果有 `props.$trigger` 或 `props.popOption` 传入 `isolated` 自动取 `'1'`, 否则其值非真（即空字串）。`duals.recheckable` 也如此处理，在 `props.$trigger` 或 `props.popOption` 有定义且未指定 `props.recheckable` 时，`duals.recheckable` 自动取初值 `'1'`。总结一下，选项构件用于切换场景面板，与触发其它动作分属两类应用，如果未显式指明 `isolated` 与 `recheckable` 初值时，系统自动适应两种应用，前一应用时不能连续 “选中”，后一应用（用作 “选项触发器”）时可以连续 “选中”。

此外，可选构件所属的 “导航面板” 还支持通过定义 `canNavigateTo` 类方法，动态判断当前场景面板是否允许切换，详情请见 [API 手册](#4.4.2.!nav_panel)。

&nbsp;
