2.2.8 查找节点
--------------

&nbsp;

前面章节介绍了投影声明主要规则，本节再介绍动态查找节点的方法。学完这些内容，您应能用 Shadow Widget 做一些简单的编程了。

#### 取 DOM 节点

W 节点是指 W 树中的节点，R 节点是 react component 节点，它必与 W 树中某节点对应。除了这两者，还有 DOM 节点的概念，所有活动状态的 react component  都能找到真实 DOM 节点，若想从 R 节点取得它的 DOM 节点，调用一个 API 即可，如下： 

``` js
  var node = comp.getHtmlNode();
```

如果这个 comp 未在活动态，比如已 unmount，取得的 DOM 节点将是 `null`。

有了 DOM 节点，可用 `utils.keyOfNode(node)` 反查 component 的 key 值，参见 [API 手册](#4.2.3.) 。

#### 定位 R 节点

定位一个 R 节点，有以下两种常用方式：

&nbsp; A) 用绝对路径查找 R 节点，如：`"W.W(sPath).component"`

&nbsp; B) 在某个 R 节点查找它的父节点、兄弟节点、子节点   
1. `comp.parentOf()`，取父节点   
2. `comp.prevSibling()`，取前一兄弟节点，如果没有，返回 `undefined`   
3. `comp.nextSibling()`，取后一兄弟节点，如果没有，返回 `undefined`   
4. `comp.componentOf(sPath)`，以当前节点为基准，查找 sPath 指示的节点

其中，`componentOf(sPath)` 功能最强大，既支持相对路径查找，也支持绝对路径查找，分以下几种情况：
1. sPath 是绝对路径（比如以 `'.body'` 开头），就按绝对路径方式查找
2. sPath 以某个 key 字串开头，表示从当前 comp 节点的子节点查找
3. sPath 以 `"//"` 开头，改以当前 comp 的父节点为基准进行查找，比如 `"//input"` 表示从 comp 的兄弟节点中查找 key 为 `"input"` 的节点，再如 `"//input.subid"` 表示找到 `input` 兄弟节点后再找其下层子节点。
4. sPath 是 “相对段” 格式，如以 `"../"` 开头表示取上一段，`"../../"` 取上一段的上一段。这里的“段”指“导航段”，一个导航段是由多层构件组成的功能块。关于相对段的用法，见后文 [段路径](#2.3.2.) 。

在 Shadow Widget 中查找一个 R 节点非常容易，定位 R 节点后，将各节点的功能串接起来，形成单向数据流，以此快捷的组装出新功能。与 react 生态圈中其它工具不同，Shadow Widget 假定数据流是多圈层的，任意起点、任意终点、任意流向，启动或终止一条数据流很随意，也高度动态，因为各个 R 节点随时被增删。所以，我们选择与之配套的机制：让各个 R 节点唾手可得，以简单明了的方式组装各个功能。不像现有 react router、redux 等工具，它们受困于 Functional Programming，解决方案不够直接，把简单问题变复杂了。 

应对 R 节点随时增删 ，我们常用 on-the-fly 方式注册侦听动作，比如：

``` js
  this.componentOf('//input').listen('data',this);
```

把侦听路径上各相关实体，扔给系统自动管理。上面代码来自 demo15，请自行阅读源码，理解一下这种编程风格。

用 React 的 refs 特性也能定位 R 节点，但它必须预先指定 refs 子节点，还无法取上级节点，没有 componentOf 用得方便，所以，一般情况下，我们不用 refs 定位节点。

#### 查找 element 节点

Element 节点就是 component 实例化之前的实体定义，`comp.props.children` 中记录这类节点，JSX 所描述的也是这种节点。

调用 `comp.elementOf(sPath)` 可查找 element 节点，以当前节点为基准，查找 sPath 指示的节点，sPath 格式与 `comp.componentOf(sPath)` 中所用参数相同。如果找到了就返回结果 element，如果没找到返回 `null`。

找到 element 节点后，我们常用它进行定制编程，如克隆特定节点、组织弹窗等。

&nbsp;
