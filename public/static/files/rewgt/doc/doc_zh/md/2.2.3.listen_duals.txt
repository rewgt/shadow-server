2.2.3 侦听数据源
--------------------

&nbsp;

#### W 节点与 R 节点

语句 `W = require('shadow-widget')`  导入构件树（即 W 树）模块，W 树由若干节点分层组装而来，各节点我们称 W 节点，变量 `W` 是 W 树的根节点。W 节点与 react component 节点不一样，为描述方便，我们将 react component 节点称为 R 节点，W 节点与 R 节点虽有一一对应关系，但两者有区别，它们之间的关系是：

1. 每个 W 节点用 `component` 属性记录它所关联的 R 节点
2. 每个 R 节点用 `widget` 属性记录它所关联的 W 节点
3. R 节点的生存周期由 react 系统管理，W 节点的生存周期则自行管理，即：   
   - 每新创建 R 节点时都自动创建一个对应的 W 节点（对应关系由 `component` 与 `widget` 互相指示），R 节点的 `props.hookTo` 指示将新建的 W 节点挂到哪个父级 W 节点下。   
   - 当 R 节点 unmount 时，系统自动删除与它对应的 W 节点，当然，删除前自动先将它从 W 树摘离。

每个 R 节点都用 `isHooked` 属性指示它是否已挂载（mount），该属性初始值为 false，当此节点的 `componentDidMount()` 调用后，isHooked 置 true，卸载时（当 `componentWillUnmount()` 调用后）isHooked 置为 false。

W 树的上下层关系直接用 key 属性组织，比如某 W 节点（变量 `w1`）下有两个节点，一个节点的 key 为数值 `0`，另一个的 key 为 `"abc"`，从 `w1` 获取这两个子级 W节点便是 `w1[0]` 与 `w1.abc`。从子级 W 节点推导父级 W 节点用 `parent` 属性，比如在本例中如下条件是成立的：   
> `w1.abc.parent === w1`

在每个 W 节点可方便的查找它的下级 W 节点，也可用绝对路径查找任意位置 W 节点。比如定义了如下界面：

``` html
  <div $=BodyPanel key='body'>
    <div $=Panel key='top'>
      <div $=P key='p' width='{0.9999}'>
        <span $=Textarea key='input' sty__='width:300px; height:100px'></span>
      </div>
      <pre $=MarkedDiv key='markdown' width='{0.9999}' height='{200}'></pre>
    </div>
  </div>
```

从 W 树查找指定 R 节点，及从 R 节点取父级 W 节点，代码如下：

``` js
  var inputComp = W.W(".body.top.p.input").component;
  parentWdgt = inputComp.widget.parent;
  console.log(parentWdgt.getPath());
```

在 R 节点查找它的下级节点：

``` js
  var sPath = 'input';   // such as 'sub1.sub2.sub3'
  var inputWdgt = parentWidget.W(sPath);
  assert(inputWdgt === inputComp.widget);
```

在任意 R 节点用绝对路径查找：

``` js
  var sPath2 = '.body.top.markdown';   // absolute path start with '.'
  var markWdgt = inputWdgt.W(sPath2);
  console.log(markWdgt.getPath());
```

从指定 R 节点查找子节点时，路径字串不以 `'.'` 开头，若以 `'.'` 开头表示按绝对路径查找。

附带说明一下，本手册所提 R 节点，实质就是 react component，手册中不说 component，改称 R 节点，通常因为上下文语义要强调该 component 为适应 Shadow Widget 附加了特定规格（比如有 `duals`、`isHooked` 属性，具备事件化驱动能力等）。

我们之所以在确定 R 节点概念后，还要定义 W 节点的概念，因为 W 树由 W 节点串接而成，而不由 R 节点直接串接。在 R 节点要用 `wdgt = comp.widget` 得到相应的 W 节点，然后用 `wdgt.parent` 取父级 W 节点，或用 `wdgt[childKey]` 取子级 W 节点，若想得到子级 R 节点，要用 `wdgt[childKeyName].component`。

#### 登记侦听函数

通过调用 `listen` API，可注册某双源属性（`duals.attr`）被侦听，当源头数据有变化后，将自动触发如下动作：

1. 指定的侦听函数被调用
2. 指定目标 R 节点的特定方法（`onAttr`）被调用
3. 让目标节点中特定 duals 属性自动与源数据同步

接下来，我们 MarkedDiv 控件演示如何侦听源数据，界面代码已在上面举例，即：用一个 Textarea 构件接收输入的 markdown 文本，然后侦听它的输入变化，当源数据有变化时，就用它刷新 MarkedDiv 中的输出（将 markdown 转化为 html）。

先捕获输入构件的 `onChange` 事件，把变化了的输入字串赋值给 `duals.textValue`：

``` js
  main['.body.top.p.input'] = {
    getInitialState: function() {
      var state = this._getInitialState(this);
      this.defineDual('textValue');
      return state;
    },
    
    $onChange: function(event) {
      this.duals.textValue = event.target.value;
    },
  };
```

然后在目标 R 节点（MarkedDiv）侦听输入节点的 `duals.textValue` 变化，拿变化后文本刷新 markdown 转换输出：

``` js
  main['.body.top.markdown'] = {
    componentDidMount: function() {
      this._componentDidMount(this);
      
      var inputMark = W.W('.body.top.p.input').component, self = this;
      inputMark.listen('textValue', function(value,oldValue) {
        if (!self.isHooked) return;
        self.duals['html.'] = value;
      });
    },
  };
```

侦听过程很简单，先找到数据源 R 节点，然后调用 `listen(sAttr,callback)`  就将侦听的钩子挂上了，再在侦听函数的 `callback` 回调函数中更新目标 R 节点的 `duals['html.']` 属性值。

因为 `listen(sAttr,callback)` 只需运行一次，我们通常在 `componentDidMount()` 中登记侦听函数。侦听函数的 callback 函数要求带两个参数 `value` 与 `oldValue`，分别是被侦听属性 `textValue` 被修改时刻的新值与旧值。

侦听挂钩记录在源头 R 节点，只要 `listen` 能触发，源头节点必然还有效（即：尚未 unmount），但目标 R 节点则未必还有效，所以，如上例，在侦听函数中要用 `if (!self.isHooked) return;` 做检查，若遇目标节点已卸载，就忽略后续处理。

上面例子的源码可在 demo13 找到。

#### 登记侦听类方法

上例中即时定义的侦听函数，还可改定义成类方法，方法名最好用 `"on"` 前缀并符合驼峰风格（calmeCased），比如被侦听的 duals 属性名为 `textValue`，将类方法命名成 `onTextValue` 才算规范的方式。不规范命名仍可用作侦听，后面有说明。

将上面例子中 MarkedDiv 构件的投影式声明，改成如下样子：

``` js
main['.body.top.markdown'] = {
  onTextValue: function(value,oldValue) {
    // no need check this.isHooked
    this.duals['html.'] = value;
  },
  
  componentDidMount: function() {
    this._componentDidMount(this);
    
    var inputMark = W.W('.body.top.p.input').component;
    inputMark.listen('textValue',this);
  },
};
```

这里 listen 函数格式是：

> `sourceComp.listen(sAttr, targetComp, sMethod)`

如果用作侦听触发的类方法不是规范命名，就要用第 3 个参数 `sMethod` 显式指明，如果是规范命名，第 3 个参数可以省去不写，如上例中 `inputMark.listen('textValue',this)`。

当调用 listen 函数传递的第 2 个参数是目标节点时，源节点与目标节点的侦听关系会自动维护，也就是说，当目标 R 节点 unmount 时，登记在源节点的触发钩子会自动删除，所以，这个例子的 `onTextValue` 方法中不必判断 `this.isHooked` 的取值。

#### 连接两个 duals 属性

为了演示两个 duals 如何联动，我们再次改写 MarkedDiv 的投影式声明：

``` js
  main['.body.top.markdown'] = {
    getInitialState: function() {
      var state = this._getInitialState(this);
      this.defineDual('markOrg', function(value,oldValue) {
        this.duals['html.'] = value;
      });
      return state;
    },
    
    componentDidMount: function() {
      this._componentDidMount(this);
      
      var inputMark = W.W('.body.top.p.input').component;
      inputMark.listen('textValue',this,'markOrg');
    },
  };
```

语句 `inputMark.listen('textValue',this,'markOrg')` 用于将数据源（`inputMark.duals.textValue`）变化联接到目标双源属性（`this.duals.markOrg`），这样，当源数据变化时，目标数据也自动跟随变化。

&nbsp;
