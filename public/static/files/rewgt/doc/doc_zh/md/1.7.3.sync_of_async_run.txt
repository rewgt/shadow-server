1.7.3 异步运算与同步等待
------------------

&nbsp;

#### 可计算表达式中的命令字

常规可计算表达式支持如下 3 种命令字格式：

1. `any: expr`，表达式中若引用多个数据源（`duals(xx).attr`），使用 any 命令字表示任一数据源变化都将触发本表达式重新计算。
2. `all: expr`，all 命令字表示全部数据源变化后，才会触发重新计算。
3. `strict: expr`，strict 命令字表示无重复全部数据源都变化后，才触发重新计算。即：在 all 命令字的基础上，增加无重复检查，各个数据源只允许变化一次，如果多次就告警。

上面所提数据源专指各节点的 `duals.attr` 属性，因为只有双源属性可被侦听，引用 `state.attr` 或 `props.attr` 时不受这些命令字影响。

在可计算表达式中，命令字可以缺省，缺省时系统自动按 `any` 方式处理。也就是说，我们在上一节举例的，都是 `any` 省略后的写法，比如：

``` js
  $value='duals.data.name + " " + duals.data.lastName'
```

若补上 `any`，应写成：

``` js
  $value='any: duals.data.name + " " + duals.data.lastName'
```

#### 异步执行与同步等待

用 listen 机制构造的数据驱动是异步的，源数据更改后，触发的动作将在下一周期执行。如果可计算表达式用 `all` 或 `strict` 命令字，表达式将等待所有数据源都触发了才获得计算，这种同步等待的机制，可用来收扰多个异步执行的任务。

下面例子（见样例 demo10）演示了使用 `any` 与 `all` 命令字的差别：
 
``` html
01 <div $=Panel key='top' height='{null}'>
02   <div $=P key='hello' width='{0.9999}' $for=''>
03     <span $=OptButton key='a' isolated='1' recheckable='1' dual-data='{0}' 
04           fire-type='onsite' $trigger='["",{$set:ex.time()}]'>A</span>
05     <span $=OptButton key='b' isolated='1' recheckable='1' dual-data='{0}' 
06           fire-type='onsite' $trigger='["",{$set:ex.time()}]'>B</span>
07     <span $=Br></span>
~~     <span $=Span $html='any: duals("a").data + "," + duals("b").data'></span>
09     <span $=Br></span>
~~     <span $=Span $html='all: duals("a").data + "," + duals("b").data' key='log'></span>
11   </div>
12 </div>
```

使用 `any` 命令字时，按钮 A 与 按钮 B 任一个点击都会触发 `$html` 表达式重新计算，而使用 `all` 时，要等两个按钮都点击了，才触发表达式重新计算。

**使用 `all` 或 `strict` 命令字时，表达式由引用源的数据驱动，它自身不会主动计算，即使它未引用任何数据源也如此**。另外，它们只在节点就绪后（即 `componentDidMount()` 调用过后）才开始响应引用源的数据变化。这不像 `any` 命令字的表达式，无论如何都至少计算一次（所在节点首次 render 渲染时就计算一次）。

请注意，在表达式中，每使用某节点的一个 `duals.attr` 属性视作一个驱动数据源，使用两个算两个数据源，但使用同一属性的多个子项时，比如用到 `duals.attr.a` 与 `duals.attr.b`，只能算作一个数据源。所以，我们无法直接构造诸如 “等待 `duals.attr.a` 与 `duals.attr.b` 都变化才触发” 的表达式，改用 “等待 `duals.attrA` 与 `duals.attrB` 都变化” 才可以。

这里说 “无法直接构造”，间接构造还是可以的，接下来有举例。

#### 用表达式构造同步等待

Shadow Widget 封装了两个 API 让 “等待 `duals.attr.a` 与 `duals.attr.b` 都变化才触发”  也能描述，这两个 API 是 `ex.tagValue()` 与 `ex.tagFired()`。前者用于给 `ex.update(data,modifier)` 的 `modifier` 首层子项追加时间标签，后者用于检测指定子项的时间标签是否均非零，非零表示子项刚触发过，如果时间标签均非零，`ex.tagFired()` 复位各项的时间标签（置零），并返回结果字串 `"true"`，否则返回空字串。有关这两个 API 的详细规格，请参考 “API 手册” 。

举例如下：

``` html
<div $=P key='sync' width='{0.9999}' $for='' dual-data='{{"a":{},"b":{}}}'>
  <span $=OptButton isolated='1' recheckable='1' key='a'
      fire-type='onsite' $trigger='["//",ex.tagValue({a:{$set:{value:true}}})]'>A</span>
  <span $=OptButton isolated='1' recheckable='1' key='b'
      fire-type='onsite' $trigger='["//",ex.tagValue({b:{$set:{value:true}}})]'>B</span>
  <span $=Br></span>
  <span $=Span $html='ex.tagFired(duals.data,"a","b")? duals.data.a.value+","+duals.data.b.value: ""'></span>
</div>
```

上面 `'$html'` 表达式实现了：当 `duals.data.a` 与 `duals.data.b` 都变化后才更新结果，原理原理较简单，点击 A 按钮时，触发在 trigger 预设的修改 `duals.data.a` 动作，预设动作 `["//",ex.tagValue({a:{$set:{value:true}}})]` 相当于运行如下脚本：

``` js
// duals.data 是目标节点（"//"）的 duals.data
duals.data = ex.update(duals.data,{a:{$set:{value:true, time:ex.time() }}});
```

函数 `ex.tagValue()` 用来追加非零的时间标签。同样，点击 B 按钮，修改 `duals.data.b` 并追加非零时间标签。点击 A 或 B 按钮都会触发 `'$html'` 表达式重新计算，`ex.tagFired(duals.data,"a","b")` 判断 `duals.data.a.time` 与 `duals.data.b.time` 均非零时，条件才成立，返回 `duals.data.a.value+","+duals.data.b.value` 的计算结果。当 `ex.tagFired()` 判断均非零条件成立时，相关的时间标签会自动清零，以便进入下一轮检测周期。

#### 用逗号运算串接同步操作

在可计算属性的表达式中，用逗号可串接数项同步操作，比如下面代码：

``` html
01 <div $=P key='hello2' width='{0.9999}' $for=''>
02   <span $=OptButton isolated='1' recheckable='1' dual-data='{0}' 
03         fire-type='onsite' $trigger='["//a",{$set:ex.time()}]' key='a'>A</span>
04   <span $=OptButton isolated='1' recheckable='1' dual-data='{0}' 
05         fire-type='onsite' $trigger='["//b",{$set:ex.time()}]' key='b'>B</span>
06   <span $=Br></span>
~~   <span $=Span $html='all:(duals("a").data,duals("b").data,ex.log("here"),"")'></span>
08 </div>
```

表达式 `all:(duals("a").data,duals("b").data,ex.log("here"),"")` 实现如下数项功能：

1. 用 all 命令字同步两个数据源，尽管这两个数据源没参与最终返回值的计算
2. 用 `ex.log()` 输出调试信息
3. 返回表达式计算结果，为简明起见，本例只返回一个空字串

不难发现，这里逗号连接多个表达式，近似于并列多条语句。此外，表达式还支持赋值，虽然不是直接支持，但借助 `ex.setVar(sName,value)` 获得同等效果，我们的 “可计算表达式” 几乎具备函数级别（在函数内，多语句，有控制流）的编程能力了。

&nbsp;
