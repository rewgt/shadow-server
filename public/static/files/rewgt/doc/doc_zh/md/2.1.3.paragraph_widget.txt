2.1.3 段落构件
------------

&nbsp;

#### P 类与 Span 类的布局特点

原生 HTML 文档对行内标签缺省按 `inline` 流方式布排，对非行内标签缺省按 `block` 流方式布排。Shadow Widget 的 Span 类与 P 类构件遵守了这两者缺省约定，也允许通过设置 `style` 的 `position:absolute` 与 `position:relative` 改变定位方式，不过，Shadow Widget 对这两类标签附加若干约束，使用更严格些，包括：

1. Span 类构件下不能挂 P 类标签，像如下面非常规 UI 定义不再支持：   
`<span><div style='display:inline block'></div></span>`

2. P 类构件可以包含 Span 类与 P 类构件，但 P 类构件不能包含 Div 类或 Panel 类构件

3. 对于 P 类构件，系统仍通过推算像素值来指导构件如何渲染输出，可能导致与原生 DOM 渲染不一致的情况发生   
系统实际并不关心 P 类构件按什么方式布排，但仍像面板构件那样推算 [“简便标记法”](#2.1.1.!pos_indicator) 指示的宽高与间距值。

前两条禁止 P 类与 Span 类标签逆向包含，对于挂入到 W 树的节点有此约束，但经封装不挂到 W 树的节点则无此限制。预先提示一句，本教程 “提高篇” 还将介绍通过定制 `$id__` 函数，实现任意原生 React 节点在特定位置插入的编程方式。

对于最后一条，产生不一致是因为取百分比运算依据父节点宽高，逐层换算成像素，除非在某层将宽高置为 `null`，自动推算的链条才被打断。实际的 DOM 渲染规则非常复杂，如：节点宽高既能用 style 属性指示，也能在 css 文件定义；百分比换算未必逐层进行；边线宽如何扣除还受 `box-sizing` 配置的影响。考虑这些因素，为避免意外，Shadow Wiget 将 P 类构件的 `width` 与 `height` 缺省值设为 `null`，即：缺省不按父节点宽高推算自身宽高。

对于 P 类构件，本系统用 duals 属性接管它的 `margin, padding, borderWidth, left, top, width, height` 以及 `minWidth, maxWidth, minHeight, maxHeight` 定义，而对于 Span 类构件，这些属性都不接管了，编程时需用类似如下语句按需设置。

``` js
  duals.style = {width: '100px'};
```

说明：P 类构件的子层不支持以负值表示的 “剩余宽高” 占用，“剩余宽高” 可分配的前提是 flex 布局，所以分配剩余宽高只在面板的子层进行。

#### 分配剩余宽高

在面板构件下，可用 “负百分比” 给各个 P 类构件分配 “剩余宽高”，见下面例子。

<div $='.rewgt.ui_demo' src='md/code/2_1_3_a.txt' input-height='{150}'></div>

同层用 “负百分比” 分配的宽度（或高度）总和，可以不必等于 `100%`，大于或者小于 `100%` 均可。

&nbsp;
