2.7.4 四种控件关系
-------------------

&nbsp;

前面我们已全部介绍 Shadow Widget 的内置构件，本节汇总分析这些构件都解决了哪些问题。

Shadow Widget 的核心目标是简化前端编程，要简化编程，先得理清网页编程中各元素之间的关联关系，进行分类，然后抽像出若干易用，且具普适性的应用范式，比如 “导航面板” 就是这么一种范式，react-router 主体功能也是为了表达导航的范式，但如果将 react-router 作为叠加在 react 之上的，用于思考 Web 界面如何开发的主体模式，显然欠完整，也不自然。

不自然是为因为它将 “如何构造各种路由 URL”，作为第一思考方式，而非可视化的思考界面如何组织。欠完整是相对而言的，Shadow Widget 的 “导航面板” 已对应 react-router 的主体功能，其它组织形式 react-router 并不涉及，用户只能用 React 虚拟 DOM 的原生能力来编程。

Shadow Widget 描述四种构件关系：顺序、包含、导航、层叠。

1. 顺序，指同级紧邻构件之间的定位关系
2. 包含，指父级与子级构件之间的定位关系
3. 导航，动态可选择的让构件切入显示
4. 层叠，栈式浮窗形态，最后显示的要最先关闭

上述 4 种关系相对完备，虽未囊括所有情形，但常见的、典型的应用形式已较好覆盖了。具体而言，flex 布局既处理顺序关系，也处理包含关系，流式布局处理顺序关系，表格布局既处理顺序关系，也处理包含关系，绝对定位使构件从顺序关系中游离出来，场景页则提供屏幕中心为基点的绝对定位机制。

Shadow Widget 主要依据实践经验决定管理哪些构件关系，原则是，尽可能适应更多场景，降低编程复杂性，同时为可视化界面设计提供支持。

系统内核能识别当前代码运行在设计态，还是常态，如果产品尚在可视化界面设计中，为了编辑属性、选择构件等方便，某些构件的表现形式与常态运行稍有不同。详情将在 [可视化设计使用手册](#5.) 中介绍。

&nbsp;
