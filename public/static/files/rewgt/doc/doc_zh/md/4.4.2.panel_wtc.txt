4.4.2 Panel 类构件
----------------

&nbsp;

> 基类定义：
> - [`Widget`](#4.4.2.!widget)
> - [`Unit`](#4.4.2.!unit)

> 根节点面板：
> - [`BodyPanel`](#4.4.2.!body_panel)

> 用于布局的面板：
> - [`Panel`](#4.4.2.!panel)
> - [`GridPanel`](#4.4.2.!grid_panel)
> - [`TablePanel`](#4.4.2.!table_panel)
> - [`NavPanel`](#4.4.2.!nav_panel)
> - [`GroundPanel`](#4.4.2.!ground_panel)

> 场景页：
> - [`ScenePage`](#4.4.2.!scene_page)

> 模板：
> - [`TempPanel`](#4.4.2.!temp_panel)

&nbsp;

##### <a name="widget"></a>`Widget`

> `T.Widget_` 是所有 WTC 的共有基类，它提供通用的属性与类方法。通常要在继承类中使用本类提供的属性与方法，使用时请注意区分行内构件，还是非行内构件，这两者差别较大。

> 本类提供 `_createClass(defs)` 方法用于定制化捆绑，生成 React class，参数 defs 要求为投影类定义，或者为 `null`，或者缺省不传递。缺省时，defs 自动取 `{}` 值，若传入 `null` 则表示按 `WTC._className` 命名，从全局 T 模块中查找相应 WTC，并返回对应的 React class 定义，该返回值还自动被缓存，下次再调用 `WTC._createClass(null)` 将直接返回缓存值。

&nbsp;

> **`_statedProp` 新增定义：** `['width','height','left','top']`   
将属性定义到 `_statedProp`，便于可视化编辑中动态更新的值可被保存，比如面板控件的 `state.width` 可能被分割条经拖拉改变宽度，当控件导出时，自动以 `state.width` 取代 `props.width` 用于存盘。Shadow Widget 内置构件中，只有 `Widget` 与 `MarkedDiv` 使用了 `_statedProp` 定义。   
&nbsp;

> **`getDefaultProps()` 新增属性：**
> - `left: 0`
> - `top: 0`
> - `width: 0.9999`
> - `height: 0.9999`
> - `minWidth: 0`
> - `maxWidth: 0`
> - `minHeight: 0`
> - `maxHeight: 0`
> - `borderWidth: [0,0,0,0]`
> - `padding: [0,0,0,0]`
> - `margin: [0,0,0,0]`

&nbsp;

> 说明：当 `left` 或 `top` 取 `null` 值时，可让虚拟 DOM 节点忽略 `style.left` 或 `style.top` 设置，这使得该节点相关的 CSS 定义不被覆盖。类似的，`margin=[null,null,null,null]; padding=[null,null,null,null]; borderWidth=[null,null,null,null];` 也具备忽略相应 CSS 属性的功能。

&nbsp;

> **新增 duals 属性：**
> - `keyid`   
此属性来源于传入的 key 值，如果传入 key 未定义，系统自动用 `0, 1, ...` 等数值表示。合法的传入 key 值限用 `"_  a~z A~Z 0~9"` 之中的字符，而且 key 值要避开 `parent component W getPath` 这几项命名（因为已用作 W 节点的内置属性或方法）。
> - `klass: ''`
> - `style: {}`
> - `left`
> - `top`
> - `width`
> - `height`
> - `minWidth`
> - `maxWidth`
> - `minHeight`
> - `maxHeight`
> - `borderWidth`
> - `padding`
> - `margin`
> - `id__: 0`
> - `childNumId: 0`
> - `trigger: undefined`   
用 array 数组定义一项或多项触发动作，一个数组成员对应一个动作，有如下 3 种类型：   
1) 用 `sPath` 指示目标选项构件，让选项构件产生选中操作，sPath 是目标节点的路径，相对路径或绝对路径均可。   
2) 用 `{$trigger:sPath}` 来触发浮层弹窗，`sPath` 是目标触发器的路径，此参数还可附加 [popOption 配置项](#4.2.2.!show_window)。   
3) 用 `[sPath,modifier,attr]` 更新目标节点的 `duals[attr]` 值，`sPath` 是目标节点的路径，当取得目标节点的 `duals[attr]` 后，系统自动执行 `duals[attr] = ex.update(duals[attr],modifier)`，`attr` 可以缺省，缺省时自动取 `'data'`，参见 [ex.update](#4.3.2.!update)。   
所有 Shadow Widget 节点都定义了 `duals.trigger`，其缺省值 `undefined` 表示未启用，该双源属性还与 `props.fireType` 配合使用，`fireType` 值为 `'auto', 'none', 'onsite'` 三者之一，缺省时按 `'auto'` 处理，`fireType` 取不同值会影响 [`utils.fireTrigger()`](#4.2.3.!fire_trigger) 的执行结果。

> **内部使用的 state 属性：**
> - `parentWidth`   
注：行内构件（Span 类）无此属性
> - `parentHeight`   
注：行内构件（Span 类）无此属性
> - `duals: []`   
用于记录 duals 属性延缓赋值
> - `exprAttrs: []`   
用于记录等待更新的可计算属性

&nbsp;

> **1) `defineDual(attr,setFn,initValue,base)`**

> 用于定义双源属性，`attr` 为 string 类型的属性名，`setFn` 为 setter 函数，`initValue` 为初始值，`base` 用于取回底层的 setter 函数，其中 `setFn, initValue, base` 参数可以缺省，setFn 缺省时系统自动定义一个 setter 用于给 `this.state.attr` 赋值，`initValue` 缺省时自动取值 `undefined`，表示不设置该双源属性的初始值，`base` 缺省时表示不取回底层的 setter 函数。

> 参数 `attr` 还可以是字串列表，用于调用一次注册多个双源属性。比如 `this.defineDual(['attr1','attr2'],setFn)` 等效于连续调用 `this.defineDual('attr1',setFn)` 与 `this.defineDual('attr2',setFn)`。

> 因为本函数返回当前 component 实例（即 `this`），所以可以将多条 `defineDual()` 语句串接起来书写，比如：

``` js
      this.defineDual('attr1').defineDual('attr2');
```

> 参数 `base` 有特殊用途，当它取回底层 setter 函数（存为 `base.setter`）后，底层 setter 不再隐式自动调用，改成在当前 setter 函数中用 `base.setter(value,oldValue)` 显式调用。比如：

``` js
      var base = {};
      this.defineDual('test', function(value,oldValue) {
        var newValue = this.state.test = parseInt(value);
        base.setter(newValue,oldValue);
      },undefined,base);
``` 

> 在未使用 `base` 参数情况下，同一双源属性的多层 setter 函数，从底层向高层依次被调。使用 `base.setter` 可以改变这个顺序，如上面代码，底层 setter 是后调用的。

> **2) `undefineDual(attr)`**

> 移除双源属性 `attr` 的定义。

> 如果继承类想重新定义 `attr` 的双源属性，通常先调用这个 `undefineDual(attr)`，然后再用 `defineDual()` 定义此属性。

> **3)<a name="set_event"></a> `setEvent(eventSet)`**

> 用来登记一个或多个事件回调函数。请在构件初始化时调用此函数，如 `getInitialState()`，或 `id__` 的 setter 函数中 `value == 1` 条件段内。

> 比如 `comp.setEvent({ $onClick: function(ev){alert(this.duals.keyid)} })`，用来登记 `$onClick` 事件函数，在事件函数中 `this` 变量可用，因为登记时它会自动 `bind` 当前构件。

> **4) `listen(attr,targComp,sMethod)`**

> 用于侦听双源属性。`attr` 指定被侦听的源属性，`targComp` 指定目标节点，`sMethod` 显式指定 `targComp` 下的类方法或另一个双源属性，此参数可缺省，缺省表示要登记的侦听函数命名将从源属性推导。若 `sMethod` 不缺省，如果 `targComp[sMethod]` 类方法存在，就登记该侦听函数，否则进一步判断 `targComp.duals[sMethod]` 是否存在，如果存在就串接两个侦听源。

> 本函数返回 `listen` 函数所在的 component 实例，多条 `listen()` 语句串接起来书写。

> 只有双源属性可被侦听，被侦听的源属性可以只一个，还可以多个，如果参数 `attr` 为字串，表示侦听单项属性，如果 `attr` 为字串数组时，表示侦听多项属性，如果 `attr` 为 `{sAttr: sMethodName}` 格式时，表示侦听多项属性，并由 `sMethodName` 指定目标节点下的侦听函数名（其值须是有效函数名）。

> `listen()` 还用于直接登记侦听函数，当 `targComp` 参数是函数时，表示将它直接登记为侦听函数，而不必到目标节点下查找类方法。

> 从被侦听源属性推导侦听函数命名的规则是：添加 `"on"` 前缀并转换成 calmeCased 风格的命名，比如 `sourComp.listen('text',targComp)` 登记的侦名函数将是 `targComp.onText`。

> **5) `unlisten(attr,targComp,sMethod)`**

> 删除侦听项，它所带的各参数格式与 `listen(attr,targComp,sMethod)` 的要求相同，但增加 `attr` 的 `"*"` 通配符格式，`"*"` 表示删除源节点中指向目标节点（`targComp`）的所有侦听项，使用通配符时 `sMethod` 参数应缺省。

> 本函数返回 `unlisten` 函数所在的 component 实例，多条 `unlisten()` 语句串接起来书写。

> 说明：一个侦听项登记后，通常不必显式删除它，当登记的侦听源或目标节点失效后，侦听项会自动删除。

> **6) `getHtmlNode()`**

> 返回React Component 节点的真实 DOM 节点，等效于 `ReactDOM.findDOMNode(this)`。

> **7) `parentOf(noVirtual,sRole)`**

> 获取父节点 Component，如果失败（可能父节点不存在，或已 unmount）则返回 `null`。

> 参数 `noVirtual` 指示是否忽略虚节点（即 `tagName.` 为空的节点），取真值为忽略。本参数可以缺省（值为 `undefined`），缺省时表示不忽略虚节点。

> 参数 `sRole` 指示目标节点的 `role` 属性还须等于指定值，若不相等则接着向上级查找。本参数也可以缺省，缺省时表示忽略 `role` 属性是否匹配。

> **8) `childOf(sKey,noVirtual)`**

> 获取指定 `sKey` 值的子节点 Component，如果失败（可能父节点不存在，或已 unmount）则返回 `null`。

> 参数 `sKey` 指示待查找子节点的 key 值，只查找一层子节点。

> 参数 `noVirtual` 指示是否忽略虚节点（即 `tagName.` 为空的节点），取真值为忽略。本参数可以缺省，缺省时表示不忽略虚节点。如果忽略虚节点，且 `sKey` 为空时，将从子节点找出首个实节点。如果忽略虚节点且 `sKey` 非空时，表示找到首个实节点后，再从其下找出 key 值为 `sKey` 的子节点。

> **9) `componentOf(path)`**

> 取 `path` 指示的 Componet 节点，如果失败返回 `null`。`path` 既可以是绝对路径，也可以是相对路径，还可以是 `0, -1, -2` 等数值，表示取指定层 callspace 所在的节点，如果当前节点未在 MJI 解释器的上下文执行环境中，将返回 `null`。

> `path` 是字串时，可以是如下形式：

```
    ".body.p.btn"    /* 绝对路径 */
    "seg.subSeg"     /* 以本节点为基点，向下定位 */
    "//"             /* 取父节点，等同于调用  this.parentOf() */
    "//seg.subSeg"   /* 以父节点为基点，向下定位 */
    "./seg"          /* 以当前导航段为基点，向下定位 */
    "../seg"         /* 以上一个导航段为基点，向下定位 */
```

> **10) `elementOf(path)`**

> 取 `path` 指示的 Element 节点，`path` 既可以是绝对路径，也可以是相对路径，还可以是 `0, -1, -2` 等数值，其格式与 `componentOf(path)` 中的 `path` 要求相同。

> **11) `prevSibling()`**

> 取前一兄弟节点，如果不存在就返回 `undefined`。

> **12) `nextSibling()`**

> 取后一兄弟节点，如果不存在就返回 `undefined`。

> **13) `fullClone(props)`**

> 带 `props` 参数克隆当前节点，返回值 Element 的 `props` 由传入参数 `props` 与原有值合并而来，`props` 参数可缺省。

> 本函数与 `React.cloneElement()` 有差别，本函数对特定属性（如面板宽、高等）取当前使用值，而非 props 传入的值，另外还支持克隆模板构件中的子成员。

> 上面所提 “特定属性” 就是各节点 `_statedProp` 列出的属性，及所有 `data-*` 与 `aria-*` 属性。

> **14) `setChild(...)`**

> 设置子节点 Element，可以传入单个子节点，也可传多个。变长参数的最后一个若是 function 类型，表示它是回调函数，在本次设置完成后自动回调，回调函数带一个参数 `changed`（取值 `true` 或 `false` 表示是否对子成员产生修改）。

> 在被设置的子节点之前，还可以用命令字串限定操作。支持格式有：`'+key'` 与 `'-key'`，前者表示在键值为 key 的子节点之前插入，后者表示删除键值为 key 的子节点。

> 在参数传入的子节点，还可是 array 数组类型，表示批量增删，如 `this.setChild('+btn',[ele,ele2])` 表示在键值为 `btn` 的子节点之前插入 `ele` 与 `ele2` 节点。

> **15) `reRender(callback,data)`**

> 用于强制 render 刷新，刷新后 `callback` 回调函数将被调用，参数 `callback` 可以缺省。`data` 是刷新前要更新到节点 state 的数据，如 `comp.reRender(null,{width:0.9999})`，参数 `data` 也可缺省。

> **16) `willResizing(width,height,inPending)`**

> 供父级是面板的构件专用，当父面板宽高变化时（即触发了 Resizing），调用本函数来决定当前节点是否按缺省方式响应父级宽高变化。`width` 与 `height` 是父构件宽高的像素值，`inPending` 指示当前父构件宽高尚在变化中（比如用鼠标拖拉分割条，拖拉未结束时，面板变宽高还在进行中）。

> 本方法用作回调服务，当 `willResizing` 未定义，或者定义了但调用它返回结果是 `true` 时，当前节点将按内置规则响应 Resizing 动作。反之，如果定义了 `willResizing` 且调用它返回为 `false` 时，表示不响应父级 Resizing，即，自身如何响应 Resizing 及如何向下传递已被接管。

##### <a name="unit"></a>`Unit`

> 本类继承自 [`Widget`](#4.4.2.!widget) ，描述通用的、非面板块级元素。

> **`getDefaultProps()` 新增属性：**
> - `className: 'rewgt-unit'`

> **新增 duals 属性：** 无。

##### <a name="body_panel"></a>`BodyPanel`

> 本类继承自 [`Widget`](#4.4.2.!widget)，描述根节点面板 。

> **`getDefaultProps()` 新增属性：** 无。

> **新增 duals 属性：**
> - `innerSize`   
`innerSize` 初始值记录了当前 Web 页内容区宽高，等效于 `[window.innerWidth,window.innerHeight]`。
> - `nodes: []`   
用 array 数组指示待动态更新的子成员定义，数组成员要求用 `[sKey,element]` 格式，其中 `sKey` 为子节点指明 key 值，`element` 指示子节点的 Element，允许有 3 种格式：文本字串（将自动转化为 P 节点）、可挂到 W 树的 Element 定义，用 json-x 描述的节点定义。   
面板的 `duals.nodes` 通常在转义标签静态的定义子成员后，用来动态更新附加的子成员，每次更新时，当旧有附加成员的 key 值不在新 array 数组中时，该旧成员将自动被移除。   
MarkedDiv 的 `duals.nodes` 值可以直接赋给本属性，因为格式是兼容的。

##### <a name="panel"></a>`Panel`

> 本类继承自 [`Widget`](#4.4.2.!widget) ，提供用于 flex 布局的面板。

> **`getDefaultProps()` 新增属性：**
> - `className: 'rewgt-panel'`

> **新增 duals 属性：**
> - `nodes: []`   
含义与用法与 [`BodyPanel`](#4.4.2.!body_panel) 的 `nodes` 双源属性相同。

&nbsp;

> **1) `isRow()`**

> 用于判断当前面板为横向布局面板，还是纵向布局面板，返回 `true` 表是横向布局，否则是纵向的。

> **2) `isReverse()`**

> 用于判断当前面板是否反向排序，返回 `true` 表示反向排列。对于横向布局反向是指从右向左排列，对于纵向布局是指从下向上排列。

##### <a name="grid_panel"></a>`GridPanel`

> 本类继承自 [`Panel`](#4.4.2.!panel) ，提供可预定义列数与列宽的面板。

> **`getDefaultProps()` 新增属性：**
> - `cellSpacing: undefined`
> - `sizes: [0.3,0.3,-1]`

> **新增 duals 属性：**
> - `cellSpacing`   
> 指定各列之间间隙的像素值，缺省为 0 像素。GridPanel 下各个子面板因 margin 取值缺省为0，子面板之间的间隙为 0，当用户修改子面板的 margin 值时，应同时调整本属性的值，以便让 GridPanel 仍能正确计算其下子面板处于哪行哪列。
> - `sizes`   
> 指定各列占宽，各项取值大于 0 且小于 1 时表示百分比，大于等于 1 时为像素值，负值表示剩余宽的百分比。

##### <a name="table_panel"></a>`TablePanel`

> 本类继承自 [`Panel`](#4.4.2.!panel) ，描述表格化的面板控件。

> **`getDefaultProps()` 新增属性：**
> - `className: 'rewgt-unit rewgt-table'`
> - `height: null`

> **新增 duals 属性：** 无。

##### <a name="table_row"></a>`TableRow`

> 本类继承自 [`Unit`](#4.4.2.!unit) ，与 TablePanel 中使用，用来描述表格内单行内容。

> **`getDefaultProps()` 新增属性：**
> - `height: null`

> **新增 duals 属性：** 无。

##### <a name="nav_panel"></a>`NavPanel`

> 本类继承自 [`Panel`](#4.4.2.!panel) ，用作导航面板。

> **`getDefaultProps()` 新增属性：** 无。

> **新增 duals 属性：** 无

> **内部使用的 state 属性：**
> - `checkedId: ''`   
记录当前场景面板的 key 值，由系统自动设置，请按只读方式使用本属性。

&nbsp;

> **1) `fireChecked(key,callback)`**

> 触发 “切换到 `key` 场景面板” 的动作，`callback` 为切换后的回调函数。

> **2) `listOptComp(key)`**

> 查询本导航面板下所有预定义的选项构件（不包括场景面板下的定义），返回 `[optComp, ...]` 数组，参数 `key` 可缺省， 缺省时列出所有预定义的选项构件，如果指定 `key` 值则尝试只查找该 `key` 值的选项构件。如果没找到选项构件，将返回空数组。

> **3) `canNavigateTo(key)`**

> 用于判断是否可以切换到 `key` 场景面板，本方法用作回调服务，可以不定义（缺省没有定义），未定义时表示对场景面板是否可切换不作限制。如果本方法已定义，且调用它的返回值是 `false` 时，表示不允许切换到指定 `key` 的场景面板。

##### <a name="ground_panel"></a>`GroundPanel`

> 本类继承自 [`Panel`](#4.4.2.!panel) ，在导航段下用作场景面板。

> **`getDefaultProps()` 新增属性：**
> - `height: null`
> - `minHeight: 20`

> **新增 duals 属性：** 无。

##### <a name="scene_page"></a>`ScenePage`

> 本类继承自 [`Panel`](#4.4.2.!panel) ，用作场景页。

> **`getDefaultProps()` 新增属性：**
> - `className: 'rewgt-panel rewgt-scene'`
> - `noShow: ''`   
取值为 `'1'` 或空串，缺省取空串，其值若为真，表示该页胶片不显示，在生产环境下（非可视化设计状态），该 ScencePage 页将自动用作模板，实现与 `TempPanel` 同等的功能，即：其下各个子构件只定义 element，而不创建 component 实例。

> **新增 duals 属性：** 无。

##### <a name="temp_panel"></a>`TempPanel`

> 本类继承自 [`Panel`](#4.4.2.!panel) ，提供 Panel 类模板。

> **`getDefaultProps()` 新增属性：** 无。

> **新增 duals 属性：** 无。

<pre $=".rewgt.book_top"></pre>

&nbsp;
