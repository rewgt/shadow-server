2.2.5 不可变数据
----------------

&nbsp;

在 react 中，为避免某构件局部有更改导致其所有子节点都刷新，从而出现界面刷新很慢的情况出现，React 提供 `shouldComponentUpdate(nextProps,nextState)`  方法来判断当前分支是否要调用 `render()` 刷新。借助此机制，Shadow Widget 也在此方法中分析 props 与 state 是否有变动，无变动时当前分支的各 DOM 节点不再重复刷新。

#### 识别是否有变动的规则

Shadow Widget 判断 props 与 state 下各成员是否有更改，直接采用恒等比较（`===`）， 即：在 `shouldComponentUpdate(nextProps,nextState)` 中逐一比较 `props.attr` 与 `nextProps.attr` ，及 `state.attr` 与 `nextState.attr` 是否有 “不恒等” 的项目，若有，说明当前节点有变动，`render` 输出将被调用。

Shadow Widget 要求凡对 props.attr 与 state.attr 取值产生影响的地方，要以不可变（immutable）风格来组织数据。扼要来讲，遵守如下规则：

1. 新值相对旧值，如果数据类型变了，可以直接赋值（因为总是 “非恒等” 的）

2. 如果数据类型没变，Array 与 Object 之外的数据直接赋值，Array 与 Object 则要创建一个新实例。   
这里 Object 是 typeof 为 `'object'`，且 Array 除外的数据。   
对于 Array，简单处理可以是：调用 `slice(0)` 复制一份，然后修改相应成员的值。对于 Object，调用 `Object.assign({},old,updated_items)` 即可。

如下是常见的**误用**情形：

``` js
  comp.duals.aDict = {};
  comp.duals.aDict.attr = someValue;  // warning: not trigger render()
  
  comp.duals.aList = [];
  comp.duals.aList.push(someValue);   // warning: not trigger render()
```

因为直接修改 Array 与 Object 的子成员，赋值前后用 `===` 比较，结果视作 “恒等”，所以，无法识别相关属性已作修改。

因为 Shadow Widget 已在最底层的构件模板类（即 `Widget`）安装上述 `shouldComponentUpdate` 函数，在任意 R 节点，上面规则均有效，您不必额外自行定义 `shouldComponentUpdate` 函数。

#### 如何获得不可变数据

将上面误用的代码，改到正确方式：

``` js
  comp.duals.aDict = Object.assign({}, comp.duals.aDict, {attr:someValue});

  var aList = comp.duals.aList.slice(0);  // copy array
  aList.push(someValue);
  comp.duals.aList = aList;
```

或者用立即数表达方式重建数据实例，如下代码也能触发 render 刷新：

``` js
  comp.duals.aDict = {attr:someValue, otherAttr:otherValue};
  comp.duals.aList = [someValue, otherValue];
```

在 Shadow Widget 传递的 props.attr 与 state.attr 值，要求以 “不可变” 风格获得，而不必严格遵守 “不可变数据”（Immutable data）组装规则，因为当子成员级别较深时，构造严格的 “不可变数据” 可能要付出较高计算成本。但是，如果你处处遵守严格的 immutable 构造方法（比如规范使用 <a target="_blank" href="https://github.com/facebook/immutable-js">immutable.js 库</a>），在 Shadow widget 中使用完全没问题。

规范使用 immutable 数据的主要缺陷有二，一是构造数据过程较繁琐，二是它有侵入性，一旦引入您得处处遵守其规则。

Shadow Widget 建议使用 react Add-Ons 的 update API，使用方法参见 <a target="_blank" href="https://facebook.github.io/react/docs/update.html">官方介绍</a> 。

为方便大家使用，Shadow Widget 缺省将这个 update 接口打包到发行库中，下面简单举例：

``` js
  comp.duals.aDict = ex.update(comp.duals.aDict,{$merge: {attr:someValue}}); // merge
  comp.duals.aDict = ex.update(comp.duals.aDict,{$set: {attr:someValue}});   // replace

  comp.duals.aList = ex.update(comp.duals.aList,{$push: [someValue]});
  comp.duals.aList = ex.update(comp.duals.aList,{$unshift: [someValue]});
  comp.duals.aList = ex.update(comp.duals.aList,{$splice: [[1,1,newItem]]}); // splice(1,1,newItem)
```

#### `id__` 属性

Shadow Widget 为每个构件都定义了 `duals.id__` 属性，构件首次 `render()` 调用时，`id__` 值固定取值 `1`，接下来每次 `render()` 调用，`id__` 值都发生变化，首次 `render()` 调用必将 `id__` 从旧值 `1` 改为其它值。

利用这个特点，**在 setter 函数用 `oldValue == 1` 识别出首次 `render()` 调用，然后执行特定的初始化处理**，比如：

``` js
  this.defineDual('id__', function(value,oldValue) {
    if (oldValue == 1) {  // init process
      // do something ...
    }
  });
```

每次 `render()` 调用，`id__` 值都有变化，变化既可以主动触发，也可被动跟随。主动触发如运行 `duals.id__ = utils.identicalId()` 或 `setState({id__:utils.identicalId()})`，被动跟随则因为其它属性变化了导致 `render()` 被调用，这时系统会自动检测，让 `id__` 发生变化，且保证与上次 `render()` 调用时取值不同。

调用 `utils.identicalId()` 可获得一个唯一 ID 值（与历史取值不重复），将它赋给 `duals.id__` 即驱动指定构件触发 `render()` 刷新。`comp.reRender()` 方法就是通过如下语句实现强制刷新的：

``` js
  this.duals.id__ = utils.identicalId();
```

本节所举例子可在 demo14 找到源码，请对照着学习。

&nbsp;
